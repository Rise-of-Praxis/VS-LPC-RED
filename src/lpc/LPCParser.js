// Generated from src/lpc/LPC.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var LPCListener = require('./LPCListener').LPCListener;
var grammarFileName = "LPC.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003i\u03db\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0003\u0002\u0005\u0002",
    "\u00d2\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0006\u0003\u00d7",
    "\n\u0003\r\u0003\u000e\u0003\u00d8\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00e7\n\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u00f1\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0006\b\u00f8\n\b\r\b\u000e\b\u00f9\u0003",
    "\b\u0003\b\u0005\b\u00fe\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u0104\n\t\u0003\n\u0003\n\u0005\n\u0108\n\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u010d\n\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0003\f\u0007\f\u0115\n\f\f\f\u000e\f\u0118\u000b",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0005\u000e\u011f\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0005\u000f\u0124\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u012d\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0006\u0011\u0136\n",
    "\u0011\r\u0011\u000e\u0011\u0137\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0007\u0011\u013d\n\u0011\f\u0011\u000e\u0011\u0140\u000b\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u0144\n\u0011\u0005\u0011\u0146\n\u0011",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u014a\n\u0012\u0003\u0012\u0005",
    "\u0012\u014d\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0007\u0014\u0155\n\u0014\f\u0014\u000e\u0014",
    "\u0158\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0005\u0018\u0162\n\u0018",
    "\u0003\u0018\u0006\u0018\u0165\n\u0018\r\u0018\u000e\u0018\u0166\u0003",
    "\u0018\u0007\u0018\u016a\n\u0018\f\u0018\u000e\u0018\u016d\u000b\u0018",
    "\u0003\u0018\u0005\u0018\u0170\n\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0175\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0005\u001a\u017a\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001b\u0006\u001b\u0180\n\u001b\r\u001b\u000e\u001b\u0181\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0005\u001d\u0189\n",
    "\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u018d\n\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u0191\n\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u0195\n\u001d\u0003\u001d\u0005\u001d\u0198\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0007\u001e\u019d\n\u001e\f\u001e\u000e\u001e",
    "\u01a0\u000b\u001e\u0003\u001f\u0005\u001f\u01a3\n\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u01a7\n\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u01ac\n\u001f\u0003 \u0003 \u0003 \u0003!\u0003!",
    "\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003&\u0003",
    "&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0005\'\u01c2\n\'\u0003\'\u0003",
    "\'\u0003\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0005*\u01d4\n*\u0003+\u0003+\u0003+\u0005",
    "+\u01d9\n+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u01ef\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0005,\u01f8\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005",
    ",\u0201\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0006,\u020d\n,\r,\u000e,\u020e\u0007,\u0211\n,\f,\u000e,\u0214",
    "\u000b,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003.\u0006.\u021c\n.\r",
    ".\u000e.\u021d\u0003.\u0007.\u0221\n.\f.\u000e.\u0224\u000b.\u0003.",
    "\u0003.\u0003.\u0007.\u0229\n.\f.\u000e.\u022c\u000b.\u0005.\u022e\n",
    ".\u0003/\u0003/\u0003/\u0003/\u0005/\u0234\n/\u00030\u00030\u00031\u0003",
    "1\u00032\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u0003",
    "3\u00053\u0244\n3\u00033\u00033\u00034\u00034\u00034\u00034\u00064\u024c",
    "\n4\r4\u000e4\u024d\u00054\u0250\n4\u00054\u0252\n4\u00035\u00035\u0003",
    "5\u00035\u00035\u00055\u0259\n5\u00036\u00036\u00036\u00036\u00036\u0005",
    "6\u0260\n6\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00058\u0269",
    "\n8\u00039\u00039\u0003:\u0003:\u0003:\u0005:\u0270\n:\u0003:\u0005",
    ":\u0273\n:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0007;\u027b\n",
    ";\f;\u000e;\u027e\u000b;\u0003<\u0003<\u0003<\u0003<\u0003<\u0006<\u0285",
    "\n<\r<\u000e<\u0286\u0003<\u0003<\u0005<\u028b\n<\u0003=\u0003=\u0005",
    "=\u028f\n=\u0003>\u0003>\u0003?\u0003?\u0005?\u0295\n?\u0003?\u0003",
    "?\u0003@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003",
    "B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u02a9\nC\u0005C\u02ab",
    "\nC\u0003D\u0003D\u0003D\u0005D\u02b0\nD\u0003E\u0003E\u0007E\u02b4",
    "\nE\fE\u000eE\u02b7\u000bE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0006F\u02c7",
    "\nF\rF\u000eF\u02c8\u0003F\u0003F\u0003F\u0005F\u02ce\nF\u0003G\u0003",
    "G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0006I\u02d9\nI\r",
    "I\u000eI\u02da\u0003I\u0003I\u0005I\u02df\nI\u0003J\u0003J\u0003J\u0003",
    "J\u0005J\u02e5\nJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003",
    "L\u0003L\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0005N\u02f6\nN\u0003",
    "N\u0005N\u02f9\nN\u0003N\u0005N\u02fc\nN\u0003N\u0003N\u0003O\u0003",
    "O\u0003O\u0003P\u0003P\u0003P\u0003P\u0007P\u0307\nP\fP\u000eP\u030a",
    "\u000bP\u0005P\u030c\nP\u0003Q\u0005Q\u030f\nQ\u0003Q\u0003Q\u0003R",
    "\u0003R\u0003R\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0006",
    "V\u0327\nV\rV\u000eV\u0328\u0005V\u032b\nV\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0005W\u0333\nW\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u0344\nY\u0003Z\u0003Z\u0005Z\u0348\nZ\u0003Z\u0003Z\u0003[\u0003",
    "[\u0003[\u0007[\u034f\n[\f[\u000e[\u0352\u000b[\u0003[\u0007[\u0355",
    "\n[\f[\u000e[\u0358\u000b[\u0003[\u0005[\u035b\n[\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0005\\\u0363\n\\\u0003]\u0005]\u0366\n]",
    "\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u036d\n]\u0003]\u0003]\u0003",
    "]\u0003]\u0005]\u0373\n]\u0003^\u0003^\u0005^\u0377\n^\u0003^\u0003",
    "^\u0003^\u0005^\u037c\n^\u0003^\u0003^\u0003^\u0005^\u0381\n^\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0005",
    "_\u038d\n_\u0003`\u0003`\u0005`\u0391\n`\u0003`\u0005`\u0394\n`\u0003",
    "a\u0003a\u0003b\u0003b\u0003b\u0003b\u0005b\u039c\nb\u0003c\u0003c\u0003",
    "c\u0003c\u0003d\u0003d\u0003d\u0006d\u03a5\nd\rd\u000ed\u03a6\u0003",
    "d\u0003d\u0003d\u0005d\u03ac\nd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0007e\u03b4\ne\fe\u000ee\u03b7\u000be\u0003e\u0005e\u03ba\ne\u0003",
    "e\u0003e\u0003f\u0003f\u0003f\u0003f\u0005f\u03c2\nf\u0003g\u0003g\u0003",
    "g\u0003g\u0007g\u03c8\ng\fg\u000eg\u03cb\u000bg\u0003g\u0005g\u03ce",
    "\ng\u0003h\u0003h\u0003h\u0007h\u03d3\nh\fh\u000eh\u03d6\u000bh\u0003",
    "h\u0005h\u03d9\nh\u0003h\u0003\u00f9\u0003Vi\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u0002",
    "\u0010\u0003\u0002YZ\u0003\u0002II\u0003\u0002\u0004\u0006\u0005\u0002",
    "\u0003\u0003\u0007\u0007\t\t\u0004\u0002%%VV\u0005\u0002558:HI\u0003",
    "\u000234\u0004\u0002++EF\u0005\u000267ADVV\u0003\u0002\'(\u0004\u0002",
    "-.??\u0003\u0002/0\u0004\u0002)*,,\u0003\u0002dg\u0002\u0423\u0002\u00d1",
    "\u0003\u0002\u0002\u0002\u0004\u00d6\u0003\u0002\u0002\u0002\u0006\u00da",
    "\u0003\u0002\u0002\u0002\b\u00e6\u0003\u0002\u0002\u0002\n\u00f0\u0003",
    "\u0002\u0002\u0002\f\u00f2\u0003\u0002\u0002\u0002\u000e\u00fd\u0003",
    "\u0002\u0002\u0002\u0010\u0103\u0003\u0002\u0002\u0002\u0012\u0105\u0003",
    "\u0002\u0002\u0002\u0014\u0109\u0003\u0002\u0002\u0002\u0016\u0111\u0003",
    "\u0002\u0002\u0002\u0018\u0119\u0003\u0002\u0002\u0002\u001a\u011e\u0003",
    "\u0002\u0002\u0002\u001c\u0123\u0003\u0002\u0002\u0002\u001e\u0129\u0003",
    "\u0002\u0002\u0002 \u0145\u0003\u0002\u0002\u0002\"\u0147\u0003\u0002",
    "\u0002\u0002$\u014e\u0003\u0002\u0002\u0002&\u0151\u0003\u0002\u0002",
    "\u0002(\u0159\u0003\u0002\u0002\u0002*\u015c\u0003\u0002\u0002\u0002",
    ",\u015e\u0003\u0002\u0002\u0002.\u016f\u0003\u0002\u0002\u00020\u0171",
    "\u0003\u0002\u0002\u00022\u0179\u0003\u0002\u0002\u00024\u017f\u0003",
    "\u0002\u0002\u00026\u0183\u0003\u0002\u0002\u00028\u0197\u0003\u0002",
    "\u0002\u0002:\u0199\u0003\u0002\u0002\u0002<\u01ab\u0003\u0002\u0002",
    "\u0002>\u01ad\u0003\u0002\u0002\u0002@\u01b0\u0003\u0002\u0002\u0002",
    "B\u01b2\u0003\u0002\u0002\u0002D\u01b4\u0003\u0002\u0002\u0002F\u01b6",
    "\u0003\u0002\u0002\u0002H\u01b8\u0003\u0002\u0002\u0002J\u01ba\u0003",
    "\u0002\u0002\u0002L\u01be\u0003\u0002\u0002\u0002N\u01c6\u0003\u0002",
    "\u0002\u0002P\u01c9\u0003\u0002\u0002\u0002R\u01d3\u0003\u0002\u0002",
    "\u0002T\u01d5\u0003\u0002\u0002\u0002V\u01f7\u0003\u0002\u0002\u0002",
    "X\u0215\u0003\u0002\u0002\u0002Z\u022d\u0003\u0002\u0002\u0002\\\u0233",
    "\u0003\u0002\u0002\u0002^\u0235\u0003\u0002\u0002\u0002`\u0237\u0003",
    "\u0002\u0002\u0002b\u0239\u0003\u0002\u0002\u0002d\u023e\u0003\u0002",
    "\u0002\u0002f\u0251\u0003\u0002\u0002\u0002h\u0258\u0003\u0002\u0002",
    "\u0002j\u025f\u0003\u0002\u0002\u0002l\u0261\u0003\u0002\u0002\u0002",
    "n\u0268\u0003\u0002\u0002\u0002p\u026a\u0003\u0002\u0002\u0002r\u026c",
    "\u0003\u0002\u0002\u0002t\u0277\u0003\u0002\u0002\u0002v\u028a\u0003",
    "\u0002\u0002\u0002x\u028e\u0003\u0002\u0002\u0002z\u0290\u0003\u0002",
    "\u0002\u0002|\u0292\u0003\u0002\u0002\u0002~\u0298\u0003\u0002\u0002",
    "\u0002\u0080\u029b\u0003\u0002\u0002\u0002\u0082\u029e\u0003\u0002\u0002",
    "\u0002\u0084\u02aa\u0003\u0002\u0002\u0002\u0086\u02af\u0003\u0002\u0002",
    "\u0002\u0088\u02b1\u0003\u0002\u0002\u0002\u008a\u02cd\u0003\u0002\u0002",
    "\u0002\u008c\u02cf\u0003\u0002\u0002\u0002\u008e\u02d2\u0003\u0002\u0002",
    "\u0002\u0090\u02de\u0003\u0002\u0002\u0002\u0092\u02e4\u0003\u0002\u0002",
    "\u0002\u0094\u02e6\u0003\u0002\u0002\u0002\u0096\u02eb\u0003\u0002\u0002",
    "\u0002\u0098\u02ef\u0003\u0002\u0002\u0002\u009a\u02f2\u0003\u0002\u0002",
    "\u0002\u009c\u02ff\u0003\u0002\u0002\u0002\u009e\u030b\u0003\u0002\u0002",
    "\u0002\u00a0\u030e\u0003\u0002\u0002\u0002\u00a2\u0312\u0003\u0002\u0002",
    "\u0002\u00a4\u0315\u0003\u0002\u0002\u0002\u00a6\u0318\u0003\u0002\u0002",
    "\u0002\u00a8\u031b\u0003\u0002\u0002\u0002\u00aa\u032a\u0003\u0002\u0002",
    "\u0002\u00ac\u0332\u0003\u0002\u0002\u0002\u00ae\u0334\u0003\u0002\u0002",
    "\u0002\u00b0\u0343\u0003\u0002\u0002\u0002\u00b2\u0345\u0003\u0002\u0002",
    "\u0002\u00b4\u034b\u0003\u0002\u0002\u0002\u00b6\u0362\u0003\u0002\u0002",
    "\u0002\u00b8\u0372\u0003\u0002\u0002\u0002\u00ba\u0380\u0003\u0002\u0002",
    "\u0002\u00bc\u038c\u0003\u0002\u0002\u0002\u00be\u0393\u0003\u0002\u0002",
    "\u0002\u00c0\u0395\u0003\u0002\u0002\u0002\u00c2\u0397\u0003\u0002\u0002",
    "\u0002\u00c4\u039d\u0003\u0002\u0002\u0002\u00c6\u03ab\u0003\u0002\u0002",
    "\u0002\u00c8\u03ad\u0003\u0002\u0002\u0002\u00ca\u03c1\u0003\u0002\u0002",
    "\u0002\u00cc\u03c3\u0003\u0002\u0002\u0002\u00ce\u03cf\u0003\u0002\u0002",
    "\u0002\u00d0\u00d2\u0005\u0004\u0003\u0002\u00d1\u00d0\u0003\u0002\u0002",
    "\u0002\u00d1\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002",
    "\u0002\u00d3\u00d4\u0007\u0002\u0002\u0003\u00d4\u0003\u0003\u0002\u0002",
    "\u0002\u00d5\u00d7\u0005\b\u0005\u0002\u00d6\u00d5\u0003\u0002\u0002",
    "\u0002\u00d7\u00d8\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002",
    "\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9\u0005\u0003\u0002\u0002",
    "\u0002\u00da\u00db\t\u0002\u0002\u0002\u00db\u0007\u0003\u0002\u0002",
    "\u0002\u00dc\u00e7\u0005\u001a\u000e\u0002\u00dd\u00e7\u0005\u00b8]",
    "\u0002\u00de\u00df\u0005\u001c\u000f\u0002\u00df\u00e0\u0007K\u0002",
    "\u0002\u00e0\u00e7\u0003\u0002\u0002\u0002\u00e1\u00e7\u0005(\u0015",
    "\u0002\u00e2\u00e7\u00050\u0019\u0002\u00e3\u00e7\u0007K\u0002\u0002",
    "\u00e4\u00e7\u0005\n\u0006\u0002\u00e5\u00e7\u0005\u0006\u0004\u0002",
    "\u00e6\u00dc\u0003\u0002\u0002\u0002\u00e6\u00dd\u0003\u0002\u0002\u0002",
    "\u00e6\u00de\u0003\u0002\u0002\u0002\u00e6\u00e1\u0003\u0002\u0002\u0002",
    "\u00e6\u00e2\u0003\u0002\u0002\u0002\u00e6\u00e3\u0003\u0002\u0002\u0002",
    "\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e6\u00e5\u0003\u0002\u0002\u0002",
    "\u00e7\t\u0003\u0002\u0002\u0002\u00e8\u00f1\u0005\u0010\t\u0002\u00e9",
    "\u00f1\u0005\f\u0007\u0002\u00ea\u00f1\u0007_\u0002\u0002\u00eb\u00f1",
    "\u0007^\u0002\u0002\u00ec\u00f1\u0007`\u0002\u0002\u00ed\u00f1\u0007",
    "a\u0002\u0002\u00ee\u00f1\u0007b\u0002\u0002\u00ef\u00f1\u0007c\u0002",
    "\u0002\u00f0\u00e8\u0003\u0002\u0002\u0002\u00f0\u00e9\u0003\u0002\u0002",
    "\u0002\u00f0\u00ea\u0003\u0002\u0002\u0002\u00f0\u00eb\u0003\u0002\u0002",
    "\u0002\u00f0\u00ec\u0003\u0002\u0002\u0002\u00f0\u00ed\u0003\u0002\u0002",
    "\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f0\u00ef\u0003\u0002\u0002",
    "\u0002\u00f1\u000b\u0003\u0002\u0002\u0002\u00f2\u00f3\u0007]\u0002",
    "\u0002\u00f3\u00f4\u0005\u000e\b\u0002\u00f4\r\u0003\u0002\u0002\u0002",
    "\u00f5\u00f7\u0007H\u0002\u0002\u00f6\u00f8\n\u0003\u0002\u0002\u00f7",
    "\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9",
    "\u00fa\u0003\u0002\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00fa",
    "\u00fb\u0003\u0002\u0002\u0002\u00fb\u00fe\u0007I\u0002\u0002\u00fc",
    "\u00fe\u0007f\u0002\u0002\u00fd\u00f5\u0003\u0002\u0002\u0002\u00fd",
    "\u00fc\u0003\u0002\u0002\u0002\u00fe\u000f\u0003\u0002\u0002\u0002\u00ff",
    "\u0100\u0007\\\u0002\u0002\u0100\u0104\u0005\u0012\n\u0002\u0101\u0102",
    "\u0007\\\u0002\u0002\u0102\u0104\u0005\u0014\u000b\u0002\u0103\u00ff",
    "\u0003\u0002\u0002\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0104\u0011",
    "\u0003\u0002\u0002\u0002\u0105\u0107\u0005\u00c0a\u0002\u0106\u0108",
    "\u0005V,\u0002\u0107\u0106\u0003\u0002\u0002\u0002\u0107\u0108\u0003",
    "\u0002\u0002\u0002\u0108\u0013\u0003\u0002\u0002\u0002\u0109\u010a\u0005",
    "\u00c0a\u0002\u010a\u010c\u0007T\u0002\u0002\u010b\u010d\u0005\u0016",
    "\f\u0002\u010c\u010b\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002",
    "\u0002\u0002\u010d\u010e\u0003\u0002\u0002\u0002\u010e\u010f\u0007U",
    "\u0002\u0002\u010f\u0110\u0005V,\u0002\u0110\u0015\u0003\u0002\u0002",
    "\u0002\u0111\u0116\u0005\u00c0a\u0002\u0112\u0113\u0007L\u0002\u0002",
    "\u0113\u0115\u0005\u00c0a\u0002\u0114\u0112\u0003\u0002\u0002\u0002",
    "\u0115\u0118\u0003\u0002\u0002\u0002\u0116\u0114\u0003\u0002\u0002\u0002",
    "\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u0017\u0003\u0002\u0002\u0002",
    "\u0118\u0116\u0003\u0002\u0002\u0002\u0119\u011a\u0005\u00bc_\u0002",
    "\u011a\u011b\u0005:\u001e\u0002\u011b\u011c\u0007K\u0002\u0002\u011c",
    "\u0019\u0003\u0002\u0002\u0002\u011d\u011f\u00058\u001d\u0002\u011e",
    "\u011d\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f",
    "\u0120\u0003\u0002\u0002\u0002\u0120\u0121\u0005\u0018\r\u0002\u0121",
    "\u001b\u0003\u0002\u0002\u0002\u0122\u0124\u0005.\u0018\u0002\u0123",
    "\u0122\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124",
    "\u0125\u0003\u0002\u0002\u0002\u0125\u0126\u0005\u00be`\u0002\u0126",
    "\u0127\u0005\u00c0a\u0002\u0127\u0128\u0005\u001e\u0010\u0002\u0128",
    "\u001d\u0003\u0002\u0002\u0002\u0129\u012c\u0007T\u0002\u0002\u012a",
    "\u012d\u0005 \u0011\u0002\u012b\u012d\u0005&\u0014\u0002\u012c\u012a",
    "\u0003\u0002\u0002\u0002\u012c\u012b\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0003\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u0007U\u0002\u0002\u012f\u001f\u0003\u0002\u0002\u0002\u0130\u0146",
    "\u0005$\u0013\u0002\u0131\u0146\u0005\"\u0012\u0002\u0132\u0135\u0005",
    "\"\u0012\u0002\u0133\u0134\u0007L\u0002\u0002\u0134\u0136\u0005\"\u0012",
    "\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002",
    "\u0002\u0137\u0135\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002",
    "\u0002\u0138\u0146\u0003\u0002\u0002\u0002\u0139\u013e\u0005\"\u0012",
    "\u0002\u013a\u013b\u0007L\u0002\u0002\u013b\u013d\u0005\"\u0012\u0002",
    "\u013c\u013a\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002",
    "\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u0141\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002",
    "\u0141\u0143\u0007L\u0002\u0002\u0142\u0144\u0005$\u0013\u0002\u0143",
    "\u0142\u0003\u0002\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144",
    "\u0146\u0003\u0002\u0002\u0002\u0145\u0130\u0003\u0002\u0002\u0002\u0145",
    "\u0131\u0003\u0002\u0002\u0002\u0145\u0132\u0003\u0002\u0002\u0002\u0145",
    "\u0139\u0003\u0002\u0002\u0002\u0146!\u0003\u0002\u0002\u0002\u0147",
    "\u0149\u0005\u00bc_\u0002\u0148\u014a\u0005@!\u0002\u0149\u0148\u0003",
    "\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014c\u0003",
    "\u0002\u0002\u0002\u014b\u014d\u0005\u00c0a\u0002\u014c\u014b\u0003",
    "\u0002\u0002\u0002\u014c\u014d\u0003\u0002\u0002\u0002\u014d#\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0005\"\u0012\u0002\u014f\u0150\u0007",
    "&\u0002\u0002\u0150%\u0003\u0002\u0002\u0002\u0151\u0156\u0005\u00bc",
    "_\u0002\u0152\u0153\u0007L\u0002\u0002\u0153\u0155\u0005&\u0014\u0002",
    "\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0158\u0003\u0002\u0002\u0002",
    "\u0156\u0154\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002",
    "\u0157\'\u0003\u0002\u0002\u0002\u0158\u0156\u0003\u0002\u0002\u0002",
    "\u0159\u015a\u0005\u001c\u000f\u0002\u015a\u015b\u0005\u0088E\u0002",
    "\u015b)\u0003\u0002\u0002\u0002\u015c\u015d\t\u0004\u0002\u0002\u015d",
    "+\u0003\u0002\u0002\u0002\u015e\u015f\t\u0005\u0002\u0002\u015f-\u0003",
    "\u0002\u0002\u0002\u0160\u0162\u0005*\u0016\u0002\u0161\u0160\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0164\u0003",
    "\u0002\u0002\u0002\u0163\u0165\u0005,\u0017\u0002\u0164\u0163\u0003",
    "\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0164\u0003",
    "\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u0170\u0003",
    "\u0002\u0002\u0002\u0168\u016a\u0005,\u0017\u0002\u0169\u0168\u0003",
    "\u0002\u0002\u0002\u016a\u016d\u0003\u0002\u0002\u0002\u016b\u0169\u0003",
    "\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u016e\u0003",
    "\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016e\u0170\u0005",
    "*\u0016\u0002\u016f\u0161\u0003\u0002\u0002\u0002\u016f\u016b\u0003",
    "\u0002\u0002\u0002\u0170/\u0003\u0002\u0002\u0002\u0171\u0172\u0005",
    "2\u001a\u0002\u0172\u0174\u0007P\u0002\u0002\u0173\u0175\u00054\u001b",
    "\u0002\u0174\u0173\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002",
    "\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0177\u0007Q\u0002",
    "\u0002\u01771\u0003\u0002\u0002\u0002\u0178\u017a\u0005*\u0016\u0002",
    "\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002",
    "\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u017c\u0007\u0015\u0002\u0002",
    "\u017c\u017d\u0005\u00c0a\u0002\u017d3\u0003\u0002\u0002\u0002\u017e",
    "\u0180\u0005\u0018\r\u0002\u017f\u017e\u0003\u0002\u0002\u0002\u0180",
    "\u0181\u0003\u0002\u0002\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181",
    "\u0182\u0003\u0002\u0002\u0002\u01825\u0003\u0002\u0002\u0002\u0183",
    "\u0184\u0005\u00c0a\u0002\u0184\u0185\u0007J\u0002\u0002\u0185\u0186",
    "\u0005V,\u0002\u01867\u0003\u0002\u0002\u0002\u0187\u0189\u0007\b\u0002",
    "\u0002\u0188\u0187\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002",
    "\u0002\u0189\u018a\u0003\u0002\u0002\u0002\u018a\u0198\u0005*\u0016",
    "\u0002\u018b\u018d\u0005*\u0016\u0002\u018c\u018b\u0003\u0002\u0002",
    "\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002",
    "\u0002\u018e\u0198\u0007\b\u0002\u0002\u018f\u0191\u0007\u0007\u0002",
    "\u0002\u0190\u018f\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002",
    "\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0198\u0005*\u0016",
    "\u0002\u0193\u0195\u0005*\u0016\u0002\u0194\u0193\u0003\u0002\u0002",
    "\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002",
    "\u0002\u0196\u0198\u0007\u0007\u0002\u0002\u0197\u0188\u0003\u0002\u0002",
    "\u0002\u0197\u018c\u0003\u0002\u0002\u0002\u0197\u0190\u0003\u0002\u0002",
    "\u0002\u0197\u0194\u0003\u0002\u0002\u0002\u01989\u0003\u0002\u0002",
    "\u0002\u0199\u019e\u0005<\u001f\u0002\u019a\u019b\u0007L\u0002\u0002",
    "\u019b\u019d\u0005<\u001f\u0002\u019c\u019a\u0003\u0002\u0002\u0002",
    "\u019d\u01a0\u0003\u0002\u0002\u0002\u019e\u019c\u0003\u0002\u0002\u0002",
    "\u019e\u019f\u0003\u0002\u0002\u0002\u019f;\u0003\u0002\u0002\u0002",
    "\u01a0\u019e\u0003\u0002\u0002\u0002\u01a1\u01a3\u0005@!\u0002\u01a2",
    "\u01a1\u0003\u0002\u0002\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3",
    "\u01a4\u0003\u0002\u0002\u0002\u01a4\u01ac\u0005\u00c0a\u0002\u01a5",
    "\u01a7\u0005@!\u0002\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a6\u01a7",
    "\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9",
    "\u0005\u00c0a\u0002\u01a9\u01aa\u0005> \u0002\u01aa\u01ac\u0003\u0002",
    "\u0002\u0002\u01ab\u01a2\u0003\u0002\u0002\u0002\u01ab\u01a6\u0003\u0002",
    "\u0002\u0002\u01ac=\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007@\u0002",
    "\u0002\u01ae\u01af\u0005V,\u0002\u01af?\u0003\u0002\u0002\u0002\u01b0",
    "\u01b1\t\u0006\u0002\u0002\u01b1A\u0003\u0002\u0002\u0002\u01b2\u01b3",
    "\t\u0007\u0002\u0002\u01b3C\u0003\u0002\u0002\u0002\u01b4\u01b5\t\b",
    "\u0002\u0002\u01b5E\u0003\u0002\u0002\u0002\u01b6\u01b7\t\t\u0002\u0002",
    "\u01b7G\u0003\u0002\u0002\u0002\u01b8\u01b9\t\n\u0002\u0002\u01b9I\u0003",
    "\u0002\u0002\u0002\u01ba\u01bb\u0005N(\u0002\u01bb\u01bc\u0005\u00b4",
    "[\u0002\u01bc\u01bd\u0005P)\u0002\u01bdK\u0003\u0002\u0002\u0002\u01be",
    "\u01bf\u0007\f\u0002\u0002\u01bf\u01c1\u0007T\u0002\u0002\u01c0\u01c2",
    "\u0005 \u0011\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2",
    "\u0003\u0002\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4",
    "\u0007U\u0002\u0002\u01c4\u01c5\u0005\u0088E\u0002\u01c5M\u0003\u0002",
    "\u0002\u0002\u01c6\u01c7\u0007T\u0002\u0002\u01c7\u01c8\u0007J\u0002",
    "\u0002\u01c8O\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007J\u0002\u0002",
    "\u01ca\u01cb\u0007U\u0002\u0002\u01cbQ\u0003\u0002\u0002\u0002\u01cc",
    "\u01cd\u0007W\u0002\u0002\u01cd\u01d4\u0007d\u0002\u0002\u01ce\u01cf",
    "\u0007W\u0002\u0002\u01cf\u01d0\u0007T\u0002\u0002\u01d0\u01d1\u0005",
    "V,\u0002\u01d1\u01d2\u0007U\u0002\u0002\u01d2\u01d4\u0003\u0002\u0002",
    "\u0002\u01d3\u01cc\u0003\u0002\u0002\u0002\u01d3\u01ce\u0003\u0002\u0002",
    "\u0002\u01d4S\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007T\u0002\u0002",
    "\u01d6\u01d8\u0005\u00bc_\u0002\u01d7\u01d9\u0005@!\u0002\u01d8\u01d7",
    "\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01da",
    "\u0003\u0002\u0002\u0002\u01da\u01db\u0007U\u0002\u0002\u01db\u01dc",
    "\u0005V,\u0002\u01dcU\u0003\u0002\u0002\u0002\u01dd\u01de\b,\u0001\u0002",
    "\u01de\u01df\u0007T\u0002\u0002\u01df\u01e0\u0005V,\u0002\u01e0\u01e1",
    "\u0007U\u0002\u0002\u01e1\u01f8\u0003\u0002\u0002\u0002\u01e2\u01f8",
    "\u0005p9\u0002\u01e3\u01f8\u0005\u00c0a\u0002\u01e4\u01f8\u0005\u00ae",
    "X\u0002\u01e5\u01f8\u0005\u00b0Y\u0002\u01e6\u01f8\u0005J&\u0002\u01e7",
    "\u01f8\u0005L\'\u0002\u01e8\u01f8\u0005r:\u0002\u01e9\u01f8\u0005|?",
    "\u0002\u01ea\u01f8\u0005b2\u0002\u01eb\u01f8\u0005d3\u0002\u01ec\u01ef",
    "\u0005^0\u0002\u01ed\u01ef\u0005`1\u0002\u01ee\u01ec\u0003\u0002\u0002",
    "\u0002\u01ee\u01ed\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0005V,\f\u01f1\u01f8\u0003\u0002\u0002\u0002\u01f2",
    "\u01f8\u0005n8\u0002\u01f3\u01f8\u0005l7\u0002\u01f4\u01f8\u0005T+\u0002",
    "\u01f5\u01f8\u0005R*\u0002\u01f6\u01f8\u0005Z.\u0002\u01f7\u01dd\u0003",
    "\u0002\u0002\u0002\u01f7\u01e2\u0003\u0002\u0002\u0002\u01f7\u01e3\u0003",
    "\u0002\u0002\u0002\u01f7\u01e4\u0003\u0002\u0002\u0002\u01f7\u01e5\u0003",
    "\u0002\u0002\u0002\u01f7\u01e6\u0003\u0002\u0002\u0002\u01f7\u01e7\u0003",
    "\u0002\u0002\u0002\u01f7\u01e8\u0003\u0002\u0002\u0002\u01f7\u01e9\u0003",
    "\u0002\u0002\u0002\u01f7\u01ea\u0003\u0002\u0002\u0002\u01f7\u01eb\u0003",
    "\u0002\u0002\u0002\u01f7\u01ee\u0003\u0002\u0002\u0002\u01f7\u01f2\u0003",
    "\u0002\u0002\u0002\u01f7\u01f3\u0003\u0002\u0002\u0002\u01f7\u01f4\u0003",
    "\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f7\u01f6\u0003",
    "\u0002\u0002\u0002\u01f8\u0212\u0003\u0002\u0002\u0002\u01f9\u01fa\f",
    "\b\u0002\u0002\u01fa\u01fb\u0005h5\u0002\u01fb\u01fc\u0005V,\t\u01fc",
    "\u0211\u0003\u0002\u0002\u0002\u01fd\u0200\f\u000f\u0002\u0002\u01fe",
    "\u0201\u0005^0\u0002\u01ff\u0201\u0005`1\u0002\u0200\u01fe\u0003\u0002",
    "\u0002\u0002\u0200\u01ff\u0003\u0002\u0002\u0002\u0201\u0211\u0003\u0002",
    "\u0002\u0002\u0202\u0203\f\u000e\u0002\u0002\u0203\u0211\u0005\u0082",
    "B\u0002\u0204\u0205\f\r\u0002\u0002\u0205\u0211\u0005\\/\u0002\u0206",
    "\u0207\f\u0007\u0002\u0002\u0207\u0211\u0005X-\u0002\u0208\u0209\f\u0005",
    "\u0002\u0002\u0209\u0211\u0007&\u0002\u0002\u020a\u020c\f\u0003\u0002",
    "\u0002\u020b\u020d\u0005\u0006\u0004\u0002\u020c\u020b\u0003\u0002\u0002",
    "\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020c\u0003\u0002\u0002",
    "\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0211\u0003\u0002\u0002",
    "\u0002\u0210\u01f9\u0003\u0002\u0002\u0002\u0210\u01fd\u0003\u0002\u0002",
    "\u0002\u0210\u0202\u0003\u0002\u0002\u0002\u0210\u0204\u0003\u0002\u0002",
    "\u0002\u0210\u0206\u0003\u0002\u0002\u0002\u0210\u0208\u0003\u0002\u0002",
    "\u0002\u0210\u020a\u0003\u0002\u0002\u0002\u0211\u0214\u0003\u0002\u0002",
    "\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002",
    "\u0002\u0213W\u0003\u0002\u0002\u0002\u0214\u0212\u0003\u0002\u0002",
    "\u0002\u0215\u0216\u0007M\u0002\u0002\u0216\u0217\u0005V,\u0002\u0217",
    "\u0218\u0007J\u0002\u0002\u0218\u0219\u0005V,\u0002\u0219Y\u0003\u0002",
    "\u0002\u0002\u021a\u021c\u0007f\u0002\u0002\u021b\u021a\u0003\u0002",
    "\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u021b\u0003\u0002",
    "\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u0222\u0003\u0002",
    "\u0002\u0002\u021f\u0221\u0005Z.\u0002\u0220\u021f\u0003\u0002\u0002",
    "\u0002\u0221\u0224\u0003\u0002\u0002\u0002\u0222\u0220\u0003\u0002\u0002",
    "\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u022e\u0003\u0002\u0002",
    "\u0002\u0224\u0222\u0003\u0002\u0002\u0002\u0225\u0226\u0005\u00c0a",
    "\u0002\u0226\u022a\u0007f\u0002\u0002\u0227\u0229\u0005Z.\u0002\u0228",
    "\u0227\u0003\u0002\u0002\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a",
    "\u0228\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b",
    "\u022e\u0003\u0002\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d",
    "\u021b\u0003\u0002\u0002\u0002\u022d\u0225\u0003\u0002\u0002\u0002\u022e",
    "[\u0003\u0002\u0002\u0002\u022f\u0230\u0007;\u0002\u0002\u0230\u0234",
    "\u0005\u00aeX\u0002\u0231\u0232\u0007;\u0002\u0002\u0232\u0234\u0005",
    "\u00c0a\u0002\u0233\u022f\u0003\u0002\u0002\u0002\u0233\u0231\u0003",
    "\u0002\u0002\u0002\u0234]\u0003\u0002\u0002\u0002\u0235\u0236\u0007",
    "1\u0002\u0002\u0236_\u0003\u0002\u0002\u0002\u0237\u0238\u00072\u0002",
    "\u0002\u0238a\u0003\u0002\u0002\u0002\u0239\u023a\u0007\u0014\u0002",
    "\u0002\u023a\u023b\u0007T\u0002\u0002\u023b\u023c\u0005V,\u0002\u023c",
    "\u023d\u0007U\u0002\u0002\u023dc\u0003\u0002\u0002\u0002\u023e\u023f",
    "\u0007$\u0002\u0002\u023f\u0240\u0007T\u0002\u0002\u0240\u0243\u0005",
    "f4\u0002\u0241\u0242\u0007L\u0002\u0002\u0242\u0244\u0005\u00b4[\u0002",
    "\u0243\u0241\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0007U\u0002\u0002",
    "\u0246e\u0003\u0002\u0002\u0002\u0247\u0252\u0005V,\u0002\u0248\u024f",
    "\u00052\u001a\u0002\u0249\u024b\u0007L\u0002\u0002\u024a\u024c\u0005",
    "6\u001c\u0002\u024b\u024a\u0003\u0002\u0002\u0002\u024c\u024d\u0003",
    "\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e\u0003",
    "\u0002\u0002\u0002\u024e\u0250\u0003\u0002\u0002\u0002\u024f\u0249\u0003",
    "\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0252\u0003",
    "\u0002\u0002\u0002\u0251\u0247\u0003\u0002\u0002\u0002\u0251\u0248\u0003",
    "\u0002\u0002\u0002\u0252g\u0003\u0002\u0002\u0002\u0253\u0259\u0005",
    "H%\u0002\u0254\u0259\u0005B\"\u0002\u0255\u0259\u0005F$\u0002\u0256",
    "\u0259\u0005D#\u0002\u0257\u0259\u0005j6\u0002\u0258\u0253\u0003\u0002",
    "\u0002\u0002\u0258\u0254\u0003\u0002\u0002\u0002\u0258\u0255\u0003\u0002",
    "\u0002\u0002\u0258\u0256\u0003\u0002\u0002\u0002\u0258\u0257\u0003\u0002",
    "\u0002\u0002\u0259i\u0003\u0002\u0002\u0002\u025a\u0260\u0007@\u0002",
    "\u0002\u025b\u0260\t\u000b\u0002\u0002\u025c\u0260\t\f\u0002\u0002\u025d",
    "\u0260\t\r\u0002\u0002\u025e\u0260\t\u000e\u0002\u0002\u025f\u025a\u0003",
    "\u0002\u0002\u0002\u025f\u025b\u0003\u0002\u0002\u0002\u025f\u025c\u0003",
    "\u0002\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u025f\u025e\u0003",
    "\u0002\u0002\u0002\u0260k\u0003\u0002\u0002\u0002\u0261\u0262\u0007",
    "G\u0002\u0002\u0262\u0263\u0005V,\u0002\u0263m\u0003\u0002\u0002\u0002",
    "\u0264\u0265\u0007A\u0002\u0002\u0265\u0269\u0005V,\u0002\u0266\u0267",
    "\u0007B\u0002\u0002\u0267\u0269\u0005V,\u0002\u0268\u0264\u0003\u0002",
    "\u0002\u0002\u0268\u0266\u0003\u0002\u0002\u0002\u0269o\u0003\u0002",
    "\u0002\u0002\u026a\u026b\t\u000f\u0002\u0002\u026bq\u0003\u0002\u0002",
    "\u0002\u026c\u026d\u0007T\u0002\u0002\u026d\u026f\u0007R\u0002\u0002",
    "\u026e\u0270\u0005t;\u0002\u026f\u026e\u0003\u0002\u0002\u0002\u026f",
    "\u0270\u0003\u0002\u0002\u0002\u0270\u0272\u0003\u0002\u0002\u0002\u0271",
    "\u0273\u0007L\u0002\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0272",
    "\u0273\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002\u0002\u0274",
    "\u0275\u0007S\u0002\u0002\u0275\u0276\u0007U\u0002\u0002\u0276s\u0003",
    "\u0002\u0002\u0002\u0277\u027c\u0005v<\u0002\u0278\u0279\u0007L\u0002",
    "\u0002\u0279\u027b\u0005v<\u0002\u027a\u0278\u0003\u0002\u0002\u0002",
    "\u027b\u027e\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002",
    "\u027c\u027d\u0003\u0002\u0002\u0002\u027du\u0003\u0002\u0002\u0002",
    "\u027e\u027c\u0003\u0002\u0002\u0002\u027f\u0280\u0005x=\u0002\u0280",
    "\u0281\u0007J\u0002\u0002\u0281\u0282\u0005z>\u0002\u0282\u028b\u0003",
    "\u0002\u0002\u0002\u0283\u0285\u0005\u0006\u0004\u0002\u0284\u0283\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0284\u0003",
    "\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0288\u0003",
    "\u0002\u0002\u0002\u0288\u0289\u0005v<\u0002\u0289\u028b\u0003\u0002",
    "\u0002\u0002\u028a\u027f\u0003\u0002\u0002\u0002\u028a\u0284\u0003\u0002",
    "\u0002\u0002\u028bw\u0003\u0002\u0002\u0002\u028c\u028f\u0005p9\u0002",
    "\u028d\u028f\u0005V,\u0002\u028e\u028c\u0003\u0002\u0002\u0002\u028e",
    "\u028d\u0003\u0002\u0002\u0002\u028fy\u0003\u0002\u0002\u0002\u0290",
    "\u0291\u0005V,\u0002\u0291{\u0003\u0002\u0002\u0002\u0292\u0294\u0005",
    "~@\u0002\u0293\u0295\u0005\u00b4[\u0002\u0294\u0293\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002",
    "\u0002\u0296\u0297\u0005\u0080A\u0002\u0297}\u0003\u0002\u0002\u0002",
    "\u0298\u0299\u0007T\u0002\u0002\u0299\u029a\u0007P\u0002\u0002\u029a",
    "\u007f\u0003\u0002\u0002\u0002\u029b\u029c\u0007Q\u0002\u0002\u029c",
    "\u029d\u0007U\u0002\u0002\u029d\u0081\u0003\u0002\u0002\u0002\u029e",
    "\u029f\u0007R\u0002\u0002\u029f\u02a0\u0005\u0084C\u0002\u02a0\u02a1",
    "\u0007S\u0002\u0002\u02a1\u0083\u0003\u0002\u0002\u0002\u02a2\u02ab",
    "\u0005\u0086D\u0002\u02a3\u02a4\u0007=\u0002\u0002\u02a4\u02ab\u0005",
    "\u0086D\u0002\u02a5\u02a6\u0005\u0086D\u0002\u02a6\u02a8\u0007=\u0002",
    "\u0002\u02a7\u02a9\u0005\u0086D\u0002\u02a8\u02a7\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002",
    "\u0002\u02aa\u02a2\u0003\u0002\u0002\u0002\u02aa\u02a3\u0003\u0002\u0002",
    "\u0002\u02aa\u02a5\u0003\u0002\u0002\u0002\u02ab\u0085\u0003\u0002\u0002",
    "\u0002\u02ac\u02b0\u0005V,\u0002\u02ad\u02ae\u0007H\u0002\u0002\u02ae",
    "\u02b0\u0005\u0086D\u0002\u02af\u02ac\u0003\u0002\u0002\u0002\u02af",
    "\u02ad\u0003\u0002\u0002\u0002\u02b0\u0087\u0003\u0002\u0002\u0002\u02b1",
    "\u02b5\u0007P\u0002\u0002\u02b2\u02b4\u0005\u008aF\u0002\u02b3\u02b2",
    "\u0003\u0002\u0002\u0002\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5\u02b3",
    "\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b8",
    "\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b8\u02b9",
    "\u0007Q\u0002\u0002\u02b9\u0089\u0003\u0002\u0002\u0002\u02ba\u02ce",
    "\u0005\u0018\r\u0002\u02bb\u02bc\u0005V,\u0002\u02bc\u02bd\u0007K\u0002",
    "\u0002\u02bd\u02ce\u0003\u0002\u0002\u0002\u02be\u02ce\u0005\u00c2b",
    "\u0002\u02bf\u02ce\u0005\u00c8e\u0002\u02c0\u02ce\u0005\u0092J\u0002",
    "\u02c1\u02ce\u0005\u008cG\u0002\u02c2\u02ce\u0005\u008eH\u0002\u02c3",
    "\u02ce\u0005\u00acW\u0002\u02c4\u02ce\u0005\u0006\u0004\u0002\u02c5",
    "\u02c7\u0005\u0006\u0004\u0002\u02c6\u02c5\u0003\u0002\u0002\u0002\u02c7",
    "\u02c8\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cb\u0005\u008aF\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002\u02cc",
    "\u02ce\u0007K\u0002\u0002\u02cd\u02ba\u0003\u0002\u0002\u0002\u02cd",
    "\u02bb\u0003\u0002\u0002\u0002\u02cd\u02be\u0003\u0002\u0002\u0002\u02cd",
    "\u02bf\u0003\u0002\u0002\u0002\u02cd\u02c0\u0003\u0002\u0002\u0002\u02cd",
    "\u02c1\u0003\u0002\u0002\u0002\u02cd\u02c2\u0003\u0002\u0002\u0002\u02cd",
    "\u02c3\u0003\u0002\u0002\u0002\u02cd\u02c4\u0003\u0002\u0002\u0002\u02cd",
    "\u02c6\u0003\u0002\u0002\u0002\u02cd\u02cc\u0003\u0002\u0002\u0002\u02ce",
    "\u008b\u0003\u0002\u0002\u0002\u02cf\u02d0\u0007\u0013\u0002\u0002\u02d0",
    "\u02d1\u0007K\u0002\u0002\u02d1\u008d\u0003\u0002\u0002\u0002\u02d2",
    "\u02d3\u0007\u0016\u0002\u0002\u02d3\u02d4\u0007K\u0002\u0002\u02d4",
    "\u008f\u0003\u0002\u0002\u0002\u02d5\u02df\u0005\u008aF\u0002\u02d6",
    "\u02df\u0005\u0088E\u0002\u02d7\u02d9\u0005\u0006\u0004\u0002\u02d8",
    "\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da",
    "\u02d8\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02db",
    "\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0005\u0090I\u0002\u02dd",
    "\u02df\u0003\u0002\u0002\u0002\u02de\u02d5\u0003\u0002\u0002\u0002\u02de",
    "\u02d6\u0003\u0002\u0002\u0002\u02de\u02d8\u0003\u0002\u0002\u0002\u02df",
    "\u0091\u0003\u0002\u0002\u0002\u02e0\u02e5\u0005\u0096L\u0002\u02e1",
    "\u02e5\u0005\u0098M\u0002\u02e2\u02e5\u0005\u009cO\u0002\u02e3\u02e5",
    "\u0005\u00a6T\u0002\u02e4\u02e0\u0003\u0002\u0002\u0002\u02e4\u02e1",
    "\u0003\u0002\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e4\u02e3",
    "\u0003\u0002\u0002\u0002\u02e5\u0093\u0003\u0002\u0002\u0002\u02e6\u02e7",
    "\u0007!\u0002\u0002\u02e7\u02e8\u0007T\u0002\u0002\u02e8\u02e9\u0005",
    "V,\u0002\u02e9\u02ea\u0007U\u0002\u0002\u02ea\u0095\u0003\u0002\u0002",
    "\u0002\u02eb\u02ec\u0007\"\u0002\u0002\u02ec\u02ed\u0005\u0090I\u0002",
    "\u02ed\u02ee\u0005\u0094K\u0002\u02ee\u0097\u0003\u0002\u0002\u0002",
    "\u02ef\u02f0\u0005\u0094K\u0002\u02f0\u02f1\u0005\u0090I\u0002\u02f1",
    "\u0099\u0003\u0002\u0002\u0002\u02f2\u02f3\u0007\u001c\u0002\u0002\u02f3",
    "\u02f5\u0007T\u0002\u0002\u02f4\u02f6\u0005\u009eP\u0002\u02f5\u02f4",
    "\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f8",
    "\u0003\u0002\u0002\u0002\u02f7\u02f9\u0005\u00a2R\u0002\u02f8\u02f7",
    "\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb",
    "\u0003\u0002\u0002\u0002\u02fa\u02fc\u0005\u00a4S\u0002\u02fb\u02fa",
    "\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fd",
    "\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007U\u0002\u0002\u02fe\u009b",
    "\u0003\u0002\u0002\u0002\u02ff\u0300\u0005\u009aN\u0002\u0300\u0301",
    "\u0005\u0090I\u0002\u0301\u009d\u0003\u0002\u0002\u0002\u0302\u030c",
    "\u0005\u00a0Q\u0002\u0303\u0308\u0005\u00a0Q\u0002\u0304\u0305\u0007",
    "L\u0002\u0002\u0305\u0307\u0005\u00a0Q\u0002\u0306\u0304\u0003\u0002",
    "\u0002\u0002\u0307\u030a\u0003\u0002\u0002\u0002\u0308\u0306\u0003\u0002",
    "\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030c\u0003\u0002",
    "\u0002\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030b\u0302\u0003\u0002",
    "\u0002\u0002\u030b\u0303\u0003\u0002\u0002\u0002\u030c\u009f\u0003\u0002",
    "\u0002\u0002\u030d\u030f\u0005\u00bc_\u0002\u030e\u030d\u0003\u0002",
    "\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002",
    "\u0002\u0002\u0310\u0311\u0005<\u001f\u0002\u0311\u00a1\u0003\u0002",
    "\u0002\u0002\u0312\u0313\u0007K\u0002\u0002\u0313\u0314\u0005\u00b4",
    "[\u0002\u0314\u00a3\u0003\u0002\u0002\u0002\u0315\u0316\u0007K\u0002",
    "\u0002\u0316\u0317\u0005\u00b4[\u0002\u0317\u00a5\u0003\u0002\u0002",
    "\u0002\u0318\u0319\u0005\u00a8U\u0002\u0319\u031a\u0005\u0090I\u0002",
    "\u031a\u00a7\u0003\u0002\u0002\u0002\u031b\u031c\u0007\u001d\u0002\u0002",
    "\u031c\u031d\u0007T\u0002\u0002\u031d\u031e\u0005\u00aaV\u0002\u031e",
    "\u031f\u0007\u001e\u0002\u0002\u031f\u0320\u0005V,\u0002\u0320\u0321",
    "\u0007U\u0002\u0002\u0321\u00a9\u0003\u0002\u0002\u0002\u0322\u032b",
    "\u0005\u00a0Q\u0002\u0323\u0326\u0005\u00a0Q\u0002\u0324\u0325\u0007",
    "L\u0002\u0002\u0325\u0327\u0005\u00a0Q\u0002\u0326\u0324\u0003\u0002",
    "\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0326\u0003\u0002",
    "\u0002\u0002\u0328\u0329\u0003\u0002\u0002\u0002\u0329\u032b\u0003\u0002",
    "\u0002\u0002\u032a\u0322\u0003\u0002\u0002\u0002\u032a\u0323\u0003\u0002",
    "\u0002\u0002\u032b\u00ab\u0003\u0002\u0002\u0002\u032c\u032d\u0007\u001b",
    "\u0002\u0002\u032d\u0333\u0007K\u0002\u0002\u032e\u032f\u0007\u001b",
    "\u0002\u0002\u032f\u0330\u0005\u00b4[\u0002\u0330\u0331\u0007K\u0002",
    "\u0002\u0331\u0333\u0003\u0002\u0002\u0002\u0332\u032c\u0003\u0002\u0002",
    "\u0002\u0332\u032e\u0003\u0002\u0002\u0002\u0333\u00ad\u0003\u0002\u0002",
    "\u0002\u0334\u0335\u0005\u00b6\\\u0002\u0335\u0336\u0005\u00b2Z\u0002",
    "\u0336\u00af\u0003\u0002\u0002\u0002\u0337\u0338\u0007<\u0002\u0002",
    "\u0338\u0344\u0005\u00aeX\u0002\u0339\u033a\u0005\u00c0a\u0002\u033a",
    "\u033b\u0007<\u0002\u0002\u033b\u033c\u0005\u00aeX\u0002\u033c\u0344",
    "\u0003\u0002\u0002\u0002\u033d\u033e\u0007\u0017\u0002\u0002\u033e\u033f",
    "\u0007<\u0002\u0002\u033f\u0344\u0005\u00aeX\u0002\u0340\u0341\u0007",
    "\u0010\u0002\u0002\u0341\u0342\u0007<\u0002\u0002\u0342\u0344\u0005",
    "\u00aeX\u0002\u0343\u0337\u0003\u0002\u0002\u0002\u0343\u0339\u0003",
    "\u0002\u0002\u0002\u0343\u033d\u0003\u0002\u0002\u0002\u0343\u0340\u0003",
    "\u0002\u0002\u0002\u0344\u00b1\u0003\u0002\u0002\u0002\u0345\u0347\u0007",
    "T\u0002\u0002\u0346\u0348\u0005\u00b4[\u0002\u0347\u0346\u0003\u0002",
    "\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002",
    "\u0002\u0002\u0349\u034a\u0007U\u0002\u0002\u034a\u00b3\u0003\u0002",
    "\u0002\u0002\u034b\u0356\u0005V,\u0002\u034c\u0350\u0007L\u0002\u0002",
    "\u034d\u034f\u0005\u0006\u0004\u0002\u034e\u034d\u0003\u0002\u0002\u0002",
    "\u034f\u0352\u0003\u0002\u0002\u0002\u0350\u034e\u0003\u0002\u0002\u0002",
    "\u0350\u0351\u0003\u0002\u0002\u0002\u0351\u0353\u0003\u0002\u0002\u0002",
    "\u0352\u0350\u0003\u0002\u0002\u0002\u0353\u0355\u0005V,\u0002\u0354",
    "\u034c\u0003\u0002\u0002\u0002\u0355\u0358\u0003\u0002\u0002\u0002\u0356",
    "\u0354\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002\u0357",
    "\u035a\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0359",
    "\u035b\u0007L\u0002\u0002\u035a\u0359\u0003\u0002\u0002\u0002\u035a",
    "\u035b\u0003\u0002\u0002\u0002\u035b\u00b5\u0003\u0002\u0002\u0002\u035c",
    "\u0363\u0005\u00c0a\u0002\u035d\u035e\u0007T\u0002\u0002\u035e\u035f",
    "\u0007V\u0002\u0002\u035f\u0360\u0005V,\u0002\u0360\u0361\u0007U\u0002",
    "\u0002\u0361\u0363\u0003\u0002\u0002\u0002\u0362\u035c\u0003\u0002\u0002",
    "\u0002\u0362\u035d\u0003\u0002\u0002\u0002\u0363\u00b7\u0003\u0002\u0002",
    "\u0002\u0364\u0366\u0005*\u0016\u0002\u0365\u0364\u0003\u0002\u0002",
    "\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u0367\u0003\u0002\u0002",
    "\u0002\u0367\u0368\u0007\u001a\u0002\u0002\u0368\u0369\u0005\u00ba^",
    "\u0002\u0369\u036a\u0007K\u0002\u0002\u036a\u0373\u0003\u0002\u0002",
    "\u0002\u036b\u036d\u0005*\u0016\u0002\u036c\u036b\u0003\u0002\u0002",
    "\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002",
    "\u0002\u036e\u036f\u0007\u001a\u0002\u0002\u036f\u0370\u0005\u00c0a",
    "\u0002\u0370\u0371\u0007K\u0002\u0002\u0371\u0373\u0003\u0002\u0002",
    "\u0002\u0372\u0365\u0003\u0002\u0002\u0002\u0372\u036c\u0003\u0002\u0002",
    "\u0002\u0373\u00b9\u0003\u0002\u0002\u0002\u0374\u0376\u0007f\u0002",
    "\u0002\u0375\u0377\u0007A\u0002\u0002\u0376\u0375\u0003\u0002\u0002",
    "\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002",
    "\u0002\u0378\u0381\u0005V,\u0002\u0379\u037b\u0005V,\u0002\u037a\u037c",
    "\u0007A\u0002\u0002\u037b\u037a\u0003\u0002\u0002\u0002\u037b\u037c",
    "\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u037e",
    "\u0007f\u0002\u0002\u037e\u0381\u0003\u0002\u0002\u0002\u037f\u0381",
    "\u0007f\u0002\u0002\u0380\u0374\u0003\u0002\u0002\u0002\u0380\u0379",
    "\u0003\u0002\u0002\u0002\u0380\u037f\u0003\u0002\u0002\u0002\u0381\u00bb",
    "\u0003\u0002\u0002\u0002\u0382\u038d\u0007\u000b\u0002\u0002\u0383\u038d",
    "\u0007\f\u0002\u0002\u0384\u038d\u0007\r\u0002\u0002\u0385\u038d\u0007",
    "\u000e\u0002\u0002\u0386\u038d\u0007\u000f\u0002\u0002\u0387\u038d\u0007",
    "\u0010\u0002\u0002\u0388\u038d\u0007\u0011\u0002\u0002\u0389\u038d\u0007",
    "\n\u0002\u0002\u038a\u038d\u00052\u001a\u0002\u038b\u038d\u0005@!\u0002",
    "\u038c\u0382\u0003\u0002\u0002\u0002\u038c\u0383\u0003\u0002\u0002\u0002",
    "\u038c\u0384\u0003\u0002\u0002\u0002\u038c\u0385\u0003\u0002\u0002\u0002",
    "\u038c\u0386\u0003\u0002\u0002\u0002\u038c\u0387\u0003\u0002\u0002\u0002",
    "\u038c\u0388\u0003\u0002\u0002\u0002\u038c\u0389\u0003\u0002\u0002\u0002",
    "\u038c\u038a\u0003\u0002\u0002\u0002\u038c\u038b\u0003\u0002\u0002\u0002",
    "\u038d\u00bd\u0003\u0002\u0002\u0002\u038e\u0390\u0005\u00bc_\u0002",
    "\u038f\u0391\u0005@!\u0002\u0390\u038f\u0003\u0002\u0002\u0002\u0390",
    "\u0391\u0003\u0002\u0002\u0002\u0391\u0394\u0003\u0002\u0002\u0002\u0392",
    "\u0394\u0007\u0012\u0002\u0002\u0393\u038e\u0003\u0002\u0002\u0002\u0393",
    "\u0392\u0003\u0002\u0002\u0002\u0394\u00bf\u0003\u0002\u0002\u0002\u0395",
    "\u0396\u0007X\u0002\u0002\u0396\u00c1\u0003\u0002\u0002\u0002\u0397",
    "\u0398\u0007\u0019\u0002\u0002\u0398\u0399\u0005\u00c4c\u0002\u0399",
    "\u039b\u0005\u0090I\u0002\u039a\u039c\u0005\u00c6d\u0002\u039b\u039a",
    "\u0003\u0002\u0002\u0002\u039b\u039c\u0003\u0002\u0002\u0002\u039c\u00c3",
    "\u0003\u0002\u0002\u0002\u039d\u039e\u0007T\u0002\u0002\u039e\u039f",
    "\u0005V,\u0002\u039f\u03a0\u0007U\u0002\u0002\u03a0\u00c5\u0003\u0002",
    "\u0002\u0002\u03a1\u03a2\u0007\u0018\u0002\u0002\u03a2\u03ac\u0005\u0090",
    "I\u0002\u03a3\u03a5\u0005\u0006\u0004\u0002\u03a4\u03a3\u0003\u0002",
    "\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03a4\u0003\u0002",
    "\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002",
    "\u0002\u0002\u03a8\u03a9\u0007\u0018\u0002\u0002\u03a9\u03aa\u0005\u0090",
    "I\u0002\u03aa\u03ac\u0003\u0002\u0002\u0002\u03ab\u03a1\u0003\u0002",
    "\u0002\u0002\u03ab\u03a4\u0003\u0002\u0002\u0002\u03ac\u00c7\u0003\u0002",
    "\u0002\u0002\u03ad\u03ae\u0007\u001f\u0002\u0002\u03ae\u03af\u0007T",
    "\u0002\u0002\u03af\u03b0\u0005V,\u0002\u03b0\u03b1\u0007U\u0002\u0002",
    "\u03b1\u03b5\u0007P\u0002\u0002\u03b2\u03b4\u0005\u00ccg\u0002\u03b3",
    "\u03b2\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003\u0002\u0002\u0002\u03b5",
    "\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6",
    "\u03b9\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b8",
    "\u03ba\u0005\u00ceh\u0002\u03b9\u03b8\u0003\u0002\u0002\u0002\u03b9",
    "\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb",
    "\u03bc\u0007Q\u0002\u0002\u03bc\u00c9\u0003\u0002\u0002\u0002\u03bd",
    "\u03c2\u0005p9\u0002\u03be\u03c2\u0005\u00c0a\u0002\u03bf\u03c2\u0005",
    "\u00ba^\u0002\u03c0\u03c2\u0005\u0084C\u0002\u03c1\u03bd\u0003\u0002",
    "\u0002\u0002\u03c1\u03be\u0003\u0002\u0002\u0002\u03c1\u03bf\u0003\u0002",
    "\u0002\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2\u00cb\u0003\u0002",
    "\u0002\u0002\u03c3\u03c4\u0007 \u0002\u0002\u03c4\u03c5\u0005\u00ca",
    "f\u0002\u03c5\u03c9\u0007J\u0002\u0002\u03c6\u03c8\u0005\u008aF\u0002",
    "\u03c7\u03c6\u0003\u0002\u0002\u0002\u03c8\u03cb\u0003\u0002\u0002\u0002",
    "\u03c9\u03c7\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002",
    "\u03ca\u03cd\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002",
    "\u03cc\u03ce\u0005\u008cG\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002",
    "\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u00cd\u0003\u0002\u0002\u0002",
    "\u03cf\u03d0\u0007#\u0002\u0002\u03d0\u03d4\u0007J\u0002\u0002\u03d1",
    "\u03d3\u0005\u008aF\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002\u03d3",
    "\u03d6\u0003\u0002\u0002\u0002\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d4",
    "\u03d5\u0003\u0002\u0002\u0002\u03d5\u03d8\u0003\u0002\u0002\u0002\u03d6",
    "\u03d4\u0003\u0002\u0002\u0002\u03d7\u03d9\u0005\u008cG\u0002\u03d8",
    "\u03d7\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9",
    "\u00cf\u0003\u0002\u0002\u0002m\u00d1\u00d8\u00e6\u00f0\u00f9\u00fd",
    "\u0103\u0107\u010c\u0116\u011e\u0123\u012c\u0137\u013e\u0143\u0145\u0149",
    "\u014c\u0156\u0161\u0166\u016b\u016f\u0174\u0179\u0181\u0188\u018c\u0190",
    "\u0194\u0197\u019e\u01a2\u01a6\u01ab\u01c1\u01d3\u01d8\u01ee\u01f7\u0200",
    "\u020e\u0210\u0212\u021d\u0222\u022a\u022d\u0233\u0243\u024d\u024f\u0251",
    "\u0258\u025f\u0268\u026f\u0272\u027c\u0286\u028a\u028e\u0294\u02a8\u02aa",
    "\u02af\u02b5\u02c8\u02cd\u02da\u02de\u02e4\u02f5\u02f8\u02fb\u0308\u030b",
    "\u030e\u0328\u032a\u0332\u0343\u0347\u0350\u0356\u035a\u0362\u0365\u036c",
    "\u0372\u0376\u037b\u0380\u038c\u0390\u0393\u039b\u03a6\u03ab\u03b5\u03b9",
    "\u03c1\u03c9\u03cd\u03d4\u03d8"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'nomask'", "'private'", "'protected'", "'public'", 
                     "'static'", "'nosave'", "'varargs'", "'buffer'", "'float'", 
                     "'function'", "'int'", "'mapping'", "'mixed'", "'object'", 
                     "'string'", "'void'", "'break'", "'catch'", "'class'", 
                     "'continue'", "'efun'", "'else'", "'if'", "'inherit'", 
                     "'return'", "'for'", "'foreach'", "'in'", "'switch'", 
                     "'case'", "'while'", "'do'", "'default'", "'new'", 
                     "'array'", "'...'", "'+='", "'-='", "'&='", "'|='", 
                     "'^'", "'^='", "'%='", "'/='", "'<<='", "'>>='", "'++'", 
                     "'--'", "'&&'", "'||'", "'=='", "'<<'", "'>>'", "'!='", 
                     "'<='", "'>='", "'->'", "'::'", "'..'", "'.'", "'*='", 
                     "'='", "'+'", "'-'", "'%'", "'/'", "'&'", "'|'", "'!'", 
                     "'<'", "'>'", "':'", "';'", "','", "'?'", "'''", "'\"'", 
                     "'{'", "'}'", "'['", "']'", "'('", "')'", "'*'", "'$'", 
                     null, null, null, "'\\'", "'#define'", "'#include'", 
                     null, null, null, "'#elseif'" ];

var symbolicNames = [ null, "NoMask", "Private", "Protected", "Public", 
                      "Static", "NoSave", "VarArgs", "Buffer", "Float", 
                      "Function", "Int", "Mapping", "Mixed", "Object", "String", 
                      "Void", "Break", "Catch", "Class", "Continue", "Efun", 
                      "Else", "If", "Inherit", "Return", "For", "Foreach", 
                      "In", "Switch", "Case", "While", "Do", "Default", 
                      "New", "Array", "Ellipsis", "AddAssign", "SubtractAssign", 
                      "BitAndAssign", "BitOrAssign", "BitXor", "BitXorAssign", 
                      "ModulusAssign", "DivideAssign", "LeftShiftAssign", 
                      "RightShiftAssign", "PlusPlus", "MinusMinus", "And", 
                      "Or", "Equals", "LeftShift", "RightShift", "NotEquals", 
                      "LessThanEqualTo", "GreaterThanEqualTo", "MemberOperator", 
                      "ScopeOperator", "Range", "Period", "MultiplyAssign", 
                      "Assign", "Add", "Subtract", "Modulus", "Divide", 
                      "BitAnd", "BitOr", "Not", "LessThan", "GreaterThan", 
                      "Colon", "SemiColon", "Comma", "Question", "SingleQuote", 
                      "DoubleQuote", "LeftBrace", "RightBrace", "LeftBracket", 
                      "RightBracket", "LeftParen", "RightParen", "Multiply", 
                      "FunctionalScope", "Identifier", "BlockComment", "LineComment", 
                      "MultipleLine", "DefinePreprocessor", "IncludePreprocessor", 
                      "IfndefPreprocessor", "IfdefPreprocessor", "IfPreprocessor", 
                      "ElseIfPreprocessor", "EndIfPreprocessor", "ErrorPreprocessor", 
                      "IntegerLiteral", "FloatLiteral", "StringLiteral", 
                      "CharacterLiteral", "Newline", "Whitespace" ];

var ruleNames =  [ "lpcProgram", "programDeclarations", "comment", "programDeclaration", 
                   "preprocessorDirective", "includePreprocessor", "includeFileLiteral", 
                   "definePreprocessor", "defineConstantStatement", "defineMacroStatement", 
                   "defineMacroParameterList", "variableDeclaration", "programVariableDeclaration", 
                   "functionDeclaration", "functionParameters", "parameterList", 
                   "parameterDefinition", "spreadParameterDefinition", "dataTypeList", 
                   "functionDefinition", "accessLevelModifier", "functionTypeModifier", 
                   "functionModifier", "classDefinition", "classIdentifier", 
                   "classMembers", "classMemberInitializer", "variableModifier", 
                   "variableList", "variable", "variableAssignmentExpression", 
                   "array", "comparisonOperator", "logicalOperator", "bitOperator", 
                   "arithmeticOperator", "functionalDeclaration", "anonymousFunctionalDeclaration", 
                   "functionalStart", "functionalEnd", "functionalParameter", 
                   "castOperation", "expression", "ternaryExpression", "stringConcatExpression", 
                   "memberIdentifier", "incrementExpression", "decrementExpression", 
                   "catchExpression", "newExpression", "newExpressionIdentifier", 
                   "operator", "assignmentOperator", "notExpression", "unaryOperator", 
                   "literal", "mappingDeclaration", "mappingElementList", 
                   "mappingElement", "mappingKey", "mappingValue", "arrayDeclaration", 
                   "arrayStart", "arrayEnd", "indexOperator", "range", "index", 
                   "block", "statement", "breakStatement", "continueStatement", 
                   "statementOrBlock", "loopStatement", "whileControlStatement", 
                   "doLoopStatement", "whileLoopStatement", "forControlStatement", 
                   "forLoopStatement", "forInitialState", "forLoopVariable", 
                   "forCondition", "forIncrementStep", "foreachLoopStatement", 
                   "foreachControlStatement", "foreachVariableList", "returnStatement", 
                   "functionCall", "scopedFunctionCall", "argumentList", 
                   "expressionList", "functionName", "inheritanceDeclaration", 
                   "stringExpression", "dataType", "functionReturnType", 
                   "identifier", "conditionalStatement", "conditionalExpression", 
                   "elseStatement", "switchStatement", "caseLabel", "caseStatement", 
                   "defaultSwitchStatement" ];

function LPCParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

LPCParser.prototype = Object.create(antlr4.Parser.prototype);
LPCParser.prototype.constructor = LPCParser;

Object.defineProperty(LPCParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

LPCParser.EOF = antlr4.Token.EOF;
LPCParser.NoMask = 1;
LPCParser.Private = 2;
LPCParser.Protected = 3;
LPCParser.Public = 4;
LPCParser.Static = 5;
LPCParser.NoSave = 6;
LPCParser.VarArgs = 7;
LPCParser.Buffer = 8;
LPCParser.Float = 9;
LPCParser.Function = 10;
LPCParser.Int = 11;
LPCParser.Mapping = 12;
LPCParser.Mixed = 13;
LPCParser.Object = 14;
LPCParser.String = 15;
LPCParser.Void = 16;
LPCParser.Break = 17;
LPCParser.Catch = 18;
LPCParser.Class = 19;
LPCParser.Continue = 20;
LPCParser.Efun = 21;
LPCParser.Else = 22;
LPCParser.If = 23;
LPCParser.Inherit = 24;
LPCParser.Return = 25;
LPCParser.For = 26;
LPCParser.Foreach = 27;
LPCParser.In = 28;
LPCParser.Switch = 29;
LPCParser.Case = 30;
LPCParser.While = 31;
LPCParser.Do = 32;
LPCParser.Default = 33;
LPCParser.New = 34;
LPCParser.Array = 35;
LPCParser.Ellipsis = 36;
LPCParser.AddAssign = 37;
LPCParser.SubtractAssign = 38;
LPCParser.BitAndAssign = 39;
LPCParser.BitOrAssign = 40;
LPCParser.BitXor = 41;
LPCParser.BitXorAssign = 42;
LPCParser.ModulusAssign = 43;
LPCParser.DivideAssign = 44;
LPCParser.LeftShiftAssign = 45;
LPCParser.RightShiftAssign = 46;
LPCParser.PlusPlus = 47;
LPCParser.MinusMinus = 48;
LPCParser.And = 49;
LPCParser.Or = 50;
LPCParser.Equals = 51;
LPCParser.LeftShift = 52;
LPCParser.RightShift = 53;
LPCParser.NotEquals = 54;
LPCParser.LessThanEqualTo = 55;
LPCParser.GreaterThanEqualTo = 56;
LPCParser.MemberOperator = 57;
LPCParser.ScopeOperator = 58;
LPCParser.Range = 59;
LPCParser.Period = 60;
LPCParser.MultiplyAssign = 61;
LPCParser.Assign = 62;
LPCParser.Add = 63;
LPCParser.Subtract = 64;
LPCParser.Modulus = 65;
LPCParser.Divide = 66;
LPCParser.BitAnd = 67;
LPCParser.BitOr = 68;
LPCParser.Not = 69;
LPCParser.LessThan = 70;
LPCParser.GreaterThan = 71;
LPCParser.Colon = 72;
LPCParser.SemiColon = 73;
LPCParser.Comma = 74;
LPCParser.Question = 75;
LPCParser.SingleQuote = 76;
LPCParser.DoubleQuote = 77;
LPCParser.LeftBrace = 78;
LPCParser.RightBrace = 79;
LPCParser.LeftBracket = 80;
LPCParser.RightBracket = 81;
LPCParser.LeftParen = 82;
LPCParser.RightParen = 83;
LPCParser.Multiply = 84;
LPCParser.FunctionalScope = 85;
LPCParser.Identifier = 86;
LPCParser.BlockComment = 87;
LPCParser.LineComment = 88;
LPCParser.MultipleLine = 89;
LPCParser.DefinePreprocessor = 90;
LPCParser.IncludePreprocessor = 91;
LPCParser.IfndefPreprocessor = 92;
LPCParser.IfdefPreprocessor = 93;
LPCParser.IfPreprocessor = 94;
LPCParser.ElseIfPreprocessor = 95;
LPCParser.EndIfPreprocessor = 96;
LPCParser.ErrorPreprocessor = 97;
LPCParser.IntegerLiteral = 98;
LPCParser.FloatLiteral = 99;
LPCParser.StringLiteral = 100;
LPCParser.CharacterLiteral = 101;
LPCParser.Newline = 102;
LPCParser.Whitespace = 103;

LPCParser.RULE_lpcProgram = 0;
LPCParser.RULE_programDeclarations = 1;
LPCParser.RULE_comment = 2;
LPCParser.RULE_programDeclaration = 3;
LPCParser.RULE_preprocessorDirective = 4;
LPCParser.RULE_includePreprocessor = 5;
LPCParser.RULE_includeFileLiteral = 6;
LPCParser.RULE_definePreprocessor = 7;
LPCParser.RULE_defineConstantStatement = 8;
LPCParser.RULE_defineMacroStatement = 9;
LPCParser.RULE_defineMacroParameterList = 10;
LPCParser.RULE_variableDeclaration = 11;
LPCParser.RULE_programVariableDeclaration = 12;
LPCParser.RULE_functionDeclaration = 13;
LPCParser.RULE_functionParameters = 14;
LPCParser.RULE_parameterList = 15;
LPCParser.RULE_parameterDefinition = 16;
LPCParser.RULE_spreadParameterDefinition = 17;
LPCParser.RULE_dataTypeList = 18;
LPCParser.RULE_functionDefinition = 19;
LPCParser.RULE_accessLevelModifier = 20;
LPCParser.RULE_functionTypeModifier = 21;
LPCParser.RULE_functionModifier = 22;
LPCParser.RULE_classDefinition = 23;
LPCParser.RULE_classIdentifier = 24;
LPCParser.RULE_classMembers = 25;
LPCParser.RULE_classMemberInitializer = 26;
LPCParser.RULE_variableModifier = 27;
LPCParser.RULE_variableList = 28;
LPCParser.RULE_variable = 29;
LPCParser.RULE_variableAssignmentExpression = 30;
LPCParser.RULE_array = 31;
LPCParser.RULE_comparisonOperator = 32;
LPCParser.RULE_logicalOperator = 33;
LPCParser.RULE_bitOperator = 34;
LPCParser.RULE_arithmeticOperator = 35;
LPCParser.RULE_functionalDeclaration = 36;
LPCParser.RULE_anonymousFunctionalDeclaration = 37;
LPCParser.RULE_functionalStart = 38;
LPCParser.RULE_functionalEnd = 39;
LPCParser.RULE_functionalParameter = 40;
LPCParser.RULE_castOperation = 41;
LPCParser.RULE_expression = 42;
LPCParser.RULE_ternaryExpression = 43;
LPCParser.RULE_stringConcatExpression = 44;
LPCParser.RULE_memberIdentifier = 45;
LPCParser.RULE_incrementExpression = 46;
LPCParser.RULE_decrementExpression = 47;
LPCParser.RULE_catchExpression = 48;
LPCParser.RULE_newExpression = 49;
LPCParser.RULE_newExpressionIdentifier = 50;
LPCParser.RULE_operator = 51;
LPCParser.RULE_assignmentOperator = 52;
LPCParser.RULE_notExpression = 53;
LPCParser.RULE_unaryOperator = 54;
LPCParser.RULE_literal = 55;
LPCParser.RULE_mappingDeclaration = 56;
LPCParser.RULE_mappingElementList = 57;
LPCParser.RULE_mappingElement = 58;
LPCParser.RULE_mappingKey = 59;
LPCParser.RULE_mappingValue = 60;
LPCParser.RULE_arrayDeclaration = 61;
LPCParser.RULE_arrayStart = 62;
LPCParser.RULE_arrayEnd = 63;
LPCParser.RULE_indexOperator = 64;
LPCParser.RULE_range = 65;
LPCParser.RULE_index = 66;
LPCParser.RULE_block = 67;
LPCParser.RULE_statement = 68;
LPCParser.RULE_breakStatement = 69;
LPCParser.RULE_continueStatement = 70;
LPCParser.RULE_statementOrBlock = 71;
LPCParser.RULE_loopStatement = 72;
LPCParser.RULE_whileControlStatement = 73;
LPCParser.RULE_doLoopStatement = 74;
LPCParser.RULE_whileLoopStatement = 75;
LPCParser.RULE_forControlStatement = 76;
LPCParser.RULE_forLoopStatement = 77;
LPCParser.RULE_forInitialState = 78;
LPCParser.RULE_forLoopVariable = 79;
LPCParser.RULE_forCondition = 80;
LPCParser.RULE_forIncrementStep = 81;
LPCParser.RULE_foreachLoopStatement = 82;
LPCParser.RULE_foreachControlStatement = 83;
LPCParser.RULE_foreachVariableList = 84;
LPCParser.RULE_returnStatement = 85;
LPCParser.RULE_functionCall = 86;
LPCParser.RULE_scopedFunctionCall = 87;
LPCParser.RULE_argumentList = 88;
LPCParser.RULE_expressionList = 89;
LPCParser.RULE_functionName = 90;
LPCParser.RULE_inheritanceDeclaration = 91;
LPCParser.RULE_stringExpression = 92;
LPCParser.RULE_dataType = 93;
LPCParser.RULE_functionReturnType = 94;
LPCParser.RULE_identifier = 95;
LPCParser.RULE_conditionalStatement = 96;
LPCParser.RULE_conditionalExpression = 97;
LPCParser.RULE_elseStatement = 98;
LPCParser.RULE_switchStatement = 99;
LPCParser.RULE_caseLabel = 100;
LPCParser.RULE_caseStatement = 101;
LPCParser.RULE_defaultSwitchStatement = 102;


function LpcProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_lpcProgram;
    return this;
}

LpcProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LpcProgramContext.prototype.constructor = LpcProgramContext;

LpcProgramContext.prototype.EOF = function() {
    return this.getToken(LPCParser.EOF, 0);
};

LpcProgramContext.prototype.programDeclarations = function() {
    return this.getTypedRuleContext(ProgramDeclarationsContext,0);
};

LpcProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterLpcProgram(this);
	}
};

LpcProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitLpcProgram(this);
	}
};




LPCParser.LpcProgramContext = LpcProgramContext;

LPCParser.prototype.lpcProgram = function() {

    var localctx = new LpcProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, LPCParser.RULE_lpcProgram);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.NoMask) | (1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Static) | (1 << LPCParser.NoSave) | (1 << LPCParser.VarArgs) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Void) | (1 << LPCParser.Class) | (1 << LPCParser.Inherit))) !== 0) || _la===LPCParser.Array || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (LPCParser.SemiColon - 73)) | (1 << (LPCParser.Multiply - 73)) | (1 << (LPCParser.BlockComment - 73)) | (1 << (LPCParser.LineComment - 73)) | (1 << (LPCParser.DefinePreprocessor - 73)) | (1 << (LPCParser.IncludePreprocessor - 73)) | (1 << (LPCParser.IfndefPreprocessor - 73)) | (1 << (LPCParser.IfdefPreprocessor - 73)) | (1 << (LPCParser.IfPreprocessor - 73)) | (1 << (LPCParser.ElseIfPreprocessor - 73)) | (1 << (LPCParser.EndIfPreprocessor - 73)) | (1 << (LPCParser.ErrorPreprocessor - 73)))) !== 0)) {
            this.state = 206;
            this.programDeclarations();
        }

        this.state = 209;
        this.match(LPCParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_programDeclarations;
    return this;
}

ProgramDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramDeclarationsContext.prototype.constructor = ProgramDeclarationsContext;

ProgramDeclarationsContext.prototype.programDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProgramDeclarationContext);
    } else {
        return this.getTypedRuleContext(ProgramDeclarationContext,i);
    }
};

ProgramDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterProgramDeclarations(this);
	}
};

ProgramDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitProgramDeclarations(this);
	}
};




LPCParser.ProgramDeclarationsContext = ProgramDeclarationsContext;

LPCParser.prototype.programDeclarations = function() {

    var localctx = new ProgramDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, LPCParser.RULE_programDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 212; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 211;
            this.programDeclaration();
            this.state = 214; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.NoMask) | (1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Static) | (1 << LPCParser.NoSave) | (1 << LPCParser.VarArgs) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Void) | (1 << LPCParser.Class) | (1 << LPCParser.Inherit))) !== 0) || _la===LPCParser.Array || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (LPCParser.SemiColon - 73)) | (1 << (LPCParser.Multiply - 73)) | (1 << (LPCParser.BlockComment - 73)) | (1 << (LPCParser.LineComment - 73)) | (1 << (LPCParser.DefinePreprocessor - 73)) | (1 << (LPCParser.IncludePreprocessor - 73)) | (1 << (LPCParser.IfndefPreprocessor - 73)) | (1 << (LPCParser.IfdefPreprocessor - 73)) | (1 << (LPCParser.IfPreprocessor - 73)) | (1 << (LPCParser.ElseIfPreprocessor - 73)) | (1 << (LPCParser.EndIfPreprocessor - 73)) | (1 << (LPCParser.ErrorPreprocessor - 73)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_comment;
    return this;
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentContext.prototype.constructor = CommentContext;

CommentContext.prototype.LineComment = function() {
    return this.getToken(LPCParser.LineComment, 0);
};

CommentContext.prototype.BlockComment = function() {
    return this.getToken(LPCParser.BlockComment, 0);
};

CommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterComment(this);
	}
};

CommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitComment(this);
	}
};




LPCParser.CommentContext = CommentContext;

LPCParser.prototype.comment = function() {

    var localctx = new CommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, LPCParser.RULE_comment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 216;
        _la = this._input.LA(1);
        if(!(_la===LPCParser.BlockComment || _la===LPCParser.LineComment)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_programDeclaration;
    return this;
}

ProgramDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramDeclarationContext.prototype.constructor = ProgramDeclarationContext;

ProgramDeclarationContext.prototype.programVariableDeclaration = function() {
    return this.getTypedRuleContext(ProgramVariableDeclarationContext,0);
};

ProgramDeclarationContext.prototype.inheritanceDeclaration = function() {
    return this.getTypedRuleContext(InheritanceDeclarationContext,0);
};

ProgramDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ProgramDeclarationContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

ProgramDeclarationContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ProgramDeclarationContext.prototype.classDefinition = function() {
    return this.getTypedRuleContext(ClassDefinitionContext,0);
};

ProgramDeclarationContext.prototype.preprocessorDirective = function() {
    return this.getTypedRuleContext(PreprocessorDirectiveContext,0);
};

ProgramDeclarationContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

ProgramDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterProgramDeclaration(this);
	}
};

ProgramDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitProgramDeclaration(this);
	}
};




LPCParser.ProgramDeclarationContext = ProgramDeclarationContext;

LPCParser.prototype.programDeclaration = function() {

    var localctx = new ProgramDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, LPCParser.RULE_programDeclaration);
    try {
        this.state = 228;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 218;
            this.programVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 219;
            this.inheritanceDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 220;
            this.functionDeclaration();
            this.state = 221;
            this.match(LPCParser.SemiColon);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 223;
            this.functionDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 224;
            this.classDefinition();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 225;
            this.match(LPCParser.SemiColon);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 226;
            this.preprocessorDirective();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 227;
            this.comment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreprocessorDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_preprocessorDirective;
    return this;
}

PreprocessorDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreprocessorDirectiveContext.prototype.constructor = PreprocessorDirectiveContext;

PreprocessorDirectiveContext.prototype.definePreprocessor = function() {
    return this.getTypedRuleContext(DefinePreprocessorContext,0);
};

PreprocessorDirectiveContext.prototype.includePreprocessor = function() {
    return this.getTypedRuleContext(IncludePreprocessorContext,0);
};

PreprocessorDirectiveContext.prototype.IfdefPreprocessor = function() {
    return this.getToken(LPCParser.IfdefPreprocessor, 0);
};

PreprocessorDirectiveContext.prototype.IfndefPreprocessor = function() {
    return this.getToken(LPCParser.IfndefPreprocessor, 0);
};

PreprocessorDirectiveContext.prototype.IfPreprocessor = function() {
    return this.getToken(LPCParser.IfPreprocessor, 0);
};

PreprocessorDirectiveContext.prototype.ElseIfPreprocessor = function() {
    return this.getToken(LPCParser.ElseIfPreprocessor, 0);
};

PreprocessorDirectiveContext.prototype.EndIfPreprocessor = function() {
    return this.getToken(LPCParser.EndIfPreprocessor, 0);
};

PreprocessorDirectiveContext.prototype.ErrorPreprocessor = function() {
    return this.getToken(LPCParser.ErrorPreprocessor, 0);
};

PreprocessorDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterPreprocessorDirective(this);
	}
};

PreprocessorDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitPreprocessorDirective(this);
	}
};




LPCParser.PreprocessorDirectiveContext = PreprocessorDirectiveContext;

LPCParser.prototype.preprocessorDirective = function() {

    var localctx = new PreprocessorDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, LPCParser.RULE_preprocessorDirective);
    try {
        this.state = 238;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.DefinePreprocessor:
            this.enterOuterAlt(localctx, 1);
            this.state = 230;
            this.definePreprocessor();
            break;
        case LPCParser.IncludePreprocessor:
            this.enterOuterAlt(localctx, 2);
            this.state = 231;
            this.includePreprocessor();
            break;
        case LPCParser.IfdefPreprocessor:
            this.enterOuterAlt(localctx, 3);
            this.state = 232;
            this.match(LPCParser.IfdefPreprocessor);
            break;
        case LPCParser.IfndefPreprocessor:
            this.enterOuterAlt(localctx, 4);
            this.state = 233;
            this.match(LPCParser.IfndefPreprocessor);
            break;
        case LPCParser.IfPreprocessor:
            this.enterOuterAlt(localctx, 5);
            this.state = 234;
            this.match(LPCParser.IfPreprocessor);
            break;
        case LPCParser.ElseIfPreprocessor:
            this.enterOuterAlt(localctx, 6);
            this.state = 235;
            this.match(LPCParser.ElseIfPreprocessor);
            break;
        case LPCParser.EndIfPreprocessor:
            this.enterOuterAlt(localctx, 7);
            this.state = 236;
            this.match(LPCParser.EndIfPreprocessor);
            break;
        case LPCParser.ErrorPreprocessor:
            this.enterOuterAlt(localctx, 8);
            this.state = 237;
            this.match(LPCParser.ErrorPreprocessor);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludePreprocessorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_includePreprocessor;
    return this;
}

IncludePreprocessorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludePreprocessorContext.prototype.constructor = IncludePreprocessorContext;

IncludePreprocessorContext.prototype.IncludePreprocessor = function() {
    return this.getToken(LPCParser.IncludePreprocessor, 0);
};

IncludePreprocessorContext.prototype.includeFileLiteral = function() {
    return this.getTypedRuleContext(IncludeFileLiteralContext,0);
};

IncludePreprocessorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterIncludePreprocessor(this);
	}
};

IncludePreprocessorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitIncludePreprocessor(this);
	}
};




LPCParser.IncludePreprocessorContext = IncludePreprocessorContext;

LPCParser.prototype.includePreprocessor = function() {

    var localctx = new IncludePreprocessorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, LPCParser.RULE_includePreprocessor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.match(LPCParser.IncludePreprocessor);
        this.state = 241;
        this.includeFileLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeFileLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_includeFileLiteral;
    return this;
}

IncludeFileLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeFileLiteralContext.prototype.constructor = IncludeFileLiteralContext;

IncludeFileLiteralContext.prototype.LessThan = function() {
    return this.getToken(LPCParser.LessThan, 0);
};

IncludeFileLiteralContext.prototype.GreaterThan = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.GreaterThan);
    } else {
        return this.getToken(LPCParser.GreaterThan, i);
    }
};


IncludeFileLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(LPCParser.StringLiteral, 0);
};

IncludeFileLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterIncludeFileLiteral(this);
	}
};

IncludeFileLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitIncludeFileLiteral(this);
	}
};




LPCParser.IncludeFileLiteralContext = IncludeFileLiteralContext;

LPCParser.prototype.includeFileLiteral = function() {

    var localctx = new IncludeFileLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, LPCParser.RULE_includeFileLiteral);
    var _la = 0; // Token type
    try {
        this.state = 251;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.LessThan:
            this.enterOuterAlt(localctx, 1);
            this.state = 243;
            this.match(LPCParser.LessThan);
            this.state = 245; 
            this._errHandler.sync(this);
            var _alt = 1+1;
            do {
            	switch (_alt) {
            	case 1+1:
            		this.state = 244;
            		_la = this._input.LA(1);
            		if(_la<=0 || _la===LPCParser.GreaterThan) {
            		this._errHandler.recoverInline(this);
            		}
            		else {
            			this._errHandler.reportMatch(this);
            		    this.consume();
            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 247; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
            } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 249;
            this.match(LPCParser.GreaterThan);
            break;
        case LPCParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 250;
            this.match(LPCParser.StringLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinePreprocessorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_definePreprocessor;
    return this;
}

DefinePreprocessorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinePreprocessorContext.prototype.constructor = DefinePreprocessorContext;

DefinePreprocessorContext.prototype.DefinePreprocessor = function() {
    return this.getToken(LPCParser.DefinePreprocessor, 0);
};

DefinePreprocessorContext.prototype.defineConstantStatement = function() {
    return this.getTypedRuleContext(DefineConstantStatementContext,0);
};

DefinePreprocessorContext.prototype.defineMacroStatement = function() {
    return this.getTypedRuleContext(DefineMacroStatementContext,0);
};

DefinePreprocessorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDefinePreprocessor(this);
	}
};

DefinePreprocessorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDefinePreprocessor(this);
	}
};




LPCParser.DefinePreprocessorContext = DefinePreprocessorContext;

LPCParser.prototype.definePreprocessor = function() {

    var localctx = new DefinePreprocessorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, LPCParser.RULE_definePreprocessor);
    try {
        this.state = 257;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 253;
            this.match(LPCParser.DefinePreprocessor);
            this.state = 254;
            this.defineConstantStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 255;
            this.match(LPCParser.DefinePreprocessor);
            this.state = 256;
            this.defineMacroStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineConstantStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_defineConstantStatement;
    return this;
}

DefineConstantStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineConstantStatementContext.prototype.constructor = DefineConstantStatementContext;

DefineConstantStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DefineConstantStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DefineConstantStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDefineConstantStatement(this);
	}
};

DefineConstantStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDefineConstantStatement(this);
	}
};




LPCParser.DefineConstantStatementContext = DefineConstantStatementContext;

LPCParser.prototype.defineConstantStatement = function() {

    var localctx = new DefineConstantStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, LPCParser.RULE_defineConstantStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.identifier();
        this.state = 261;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 260;
            this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineMacroStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_defineMacroStatement;
    return this;
}

DefineMacroStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineMacroStatementContext.prototype.constructor = DefineMacroStatementContext;

DefineMacroStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DefineMacroStatementContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

DefineMacroStatementContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

DefineMacroStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DefineMacroStatementContext.prototype.defineMacroParameterList = function() {
    return this.getTypedRuleContext(DefineMacroParameterListContext,0);
};

DefineMacroStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDefineMacroStatement(this);
	}
};

DefineMacroStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDefineMacroStatement(this);
	}
};




LPCParser.DefineMacroStatementContext = DefineMacroStatementContext;

LPCParser.prototype.defineMacroStatement = function() {

    var localctx = new DefineMacroStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, LPCParser.RULE_defineMacroStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 263;
        this.identifier();
        this.state = 264;
        this.match(LPCParser.LeftParen);
        this.state = 266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Identifier) {
            this.state = 265;
            this.defineMacroParameterList();
        }

        this.state = 268;
        this.match(LPCParser.RightParen);
        this.state = 269;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineMacroParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_defineMacroParameterList;
    return this;
}

DefineMacroParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineMacroParameterListContext.prototype.constructor = DefineMacroParameterListContext;

DefineMacroParameterListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

DefineMacroParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


DefineMacroParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDefineMacroParameterList(this);
	}
};

DefineMacroParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDefineMacroParameterList(this);
	}
};




LPCParser.DefineMacroParameterListContext = DefineMacroParameterListContext;

LPCParser.prototype.defineMacroParameterList = function() {

    var localctx = new DefineMacroParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, LPCParser.RULE_defineMacroParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this.identifier();
        this.state = 276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LPCParser.Comma) {
            this.state = 272;
            this.match(LPCParser.Comma);
            this.state = 273;
            this.identifier();
            this.state = 278;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

VariableDeclarationContext.prototype.variableList = function() {
    return this.getTypedRuleContext(VariableListContext,0);
};

VariableDeclarationContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitVariableDeclaration(this);
	}
};




LPCParser.VariableDeclarationContext = VariableDeclarationContext;

LPCParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, LPCParser.RULE_variableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279;
        this.dataType();
        this.state = 280;
        this.variableList();
        this.state = 281;
        this.match(LPCParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProgramVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_programVariableDeclaration;
    return this;
}

ProgramVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramVariableDeclarationContext.prototype.constructor = ProgramVariableDeclarationContext;

ProgramVariableDeclarationContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

ProgramVariableDeclarationContext.prototype.variableModifier = function() {
    return this.getTypedRuleContext(VariableModifierContext,0);
};

ProgramVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterProgramVariableDeclaration(this);
	}
};

ProgramVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitProgramVariableDeclaration(this);
	}
};




LPCParser.ProgramVariableDeclarationContext = ProgramVariableDeclarationContext;

LPCParser.prototype.programVariableDeclaration = function() {

    var localctx = new ProgramVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, LPCParser.RULE_programVariableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 283;
            this.variableModifier();

        }
        this.state = 286;
        this.variableDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.functionReturnType = function() {
    return this.getTypedRuleContext(FunctionReturnTypeContext,0);
};

FunctionDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDeclarationContext.prototype.functionParameters = function() {
    return this.getTypedRuleContext(FunctionParametersContext,0);
};

FunctionDeclarationContext.prototype.functionModifier = function() {
    return this.getTypedRuleContext(FunctionModifierContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




LPCParser.FunctionDeclarationContext = FunctionDeclarationContext;

LPCParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, LPCParser.RULE_functionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 288;
            this.functionModifier();

        }
        this.state = 291;
        this.functionReturnType();
        this.state = 292;
        this.identifier();
        this.state = 293;
        this.functionParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionParameters;
    return this;
}

FunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionParametersContext.prototype.constructor = FunctionParametersContext;

FunctionParametersContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

FunctionParametersContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

FunctionParametersContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionParametersContext.prototype.dataTypeList = function() {
    return this.getTypedRuleContext(DataTypeListContext,0);
};

FunctionParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionParameters(this);
	}
};

FunctionParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionParameters(this);
	}
};




LPCParser.FunctionParametersContext = FunctionParametersContext;

LPCParser.prototype.functionParameters = function() {

    var localctx = new FunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, LPCParser.RULE_functionParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this.match(LPCParser.LeftParen);
        this.state = 298;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 296;
            this.parameterList();

        } else if(la_===2) {
            this.state = 297;
            this.dataTypeList();

        }
        this.state = 300;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.spreadParameterDefinition = function() {
    return this.getTypedRuleContext(SpreadParameterDefinitionContext,0);
};

ParameterListContext.prototype.parameterDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDefinitionContext);
    } else {
        return this.getTypedRuleContext(ParameterDefinitionContext,i);
    }
};

ParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitParameterList(this);
	}
};




LPCParser.ParameterListContext = ParameterListContext;

LPCParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, LPCParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.state = 323;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 302;
            this.spreadParameterDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 303;
            this.parameterDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 304;
            this.parameterDefinition();
            this.state = 307; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 305;
                this.match(LPCParser.Comma);
                this.state = 306;
                this.parameterDefinition();
                this.state = 309; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LPCParser.Comma);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 311;
            this.parameterDefinition();
            this.state = 316;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 312;
                    this.match(LPCParser.Comma);
                    this.state = 313;
                    this.parameterDefinition(); 
                }
                this.state = 318;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
            }

            this.state = 319;
            this.match(LPCParser.Comma);
            this.state = 321;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Class))) !== 0) || _la===LPCParser.Array || _la===LPCParser.Multiply) {
                this.state = 320;
                this.spreadParameterDefinition();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_parameterDefinition;
    return this;
}

ParameterDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDefinitionContext.prototype.constructor = ParameterDefinitionContext;

ParameterDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ParameterDefinitionContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

ParameterDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterParameterDefinition(this);
	}
};

ParameterDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitParameterDefinition(this);
	}
};




LPCParser.ParameterDefinitionContext = ParameterDefinitionContext;

LPCParser.prototype.parameterDefinition = function() {

    var localctx = new ParameterDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, LPCParser.RULE_parameterDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.dataType();
        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Array || _la===LPCParser.Multiply) {
            this.state = 326;
            this.array();
        }

        this.state = 330;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Identifier) {
            this.state = 329;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpreadParameterDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_spreadParameterDefinition;
    return this;
}

SpreadParameterDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpreadParameterDefinitionContext.prototype.constructor = SpreadParameterDefinitionContext;

SpreadParameterDefinitionContext.prototype.parameterDefinition = function() {
    return this.getTypedRuleContext(ParameterDefinitionContext,0);
};

SpreadParameterDefinitionContext.prototype.Ellipsis = function() {
    return this.getToken(LPCParser.Ellipsis, 0);
};

SpreadParameterDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterSpreadParameterDefinition(this);
	}
};

SpreadParameterDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitSpreadParameterDefinition(this);
	}
};




LPCParser.SpreadParameterDefinitionContext = SpreadParameterDefinitionContext;

LPCParser.prototype.spreadParameterDefinition = function() {

    var localctx = new SpreadParameterDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, LPCParser.RULE_spreadParameterDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.parameterDefinition();
        this.state = 333;
        this.match(LPCParser.Ellipsis);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_dataTypeList;
    return this;
}

DataTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeListContext.prototype.constructor = DataTypeListContext;

DataTypeListContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

DataTypeListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


DataTypeListContext.prototype.dataTypeList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataTypeListContext);
    } else {
        return this.getTypedRuleContext(DataTypeListContext,i);
    }
};

DataTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDataTypeList(this);
	}
};

DataTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDataTypeList(this);
	}
};




LPCParser.DataTypeListContext = DataTypeListContext;

LPCParser.prototype.dataTypeList = function() {

    var localctx = new DataTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, LPCParser.RULE_dataTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 335;
        this.dataType();
        this.state = 340;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 336;
                this.match(LPCParser.Comma);
                this.state = 337;
                this.dataTypeList(); 
            }
            this.state = 342;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

FunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionDefinition(this);
	}
};




LPCParser.FunctionDefinitionContext = FunctionDefinitionContext;

LPCParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, LPCParser.RULE_functionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.functionDeclaration();
        this.state = 344;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AccessLevelModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_accessLevelModifier;
    return this;
}

AccessLevelModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessLevelModifierContext.prototype.constructor = AccessLevelModifierContext;

AccessLevelModifierContext.prototype.Private = function() {
    return this.getToken(LPCParser.Private, 0);
};

AccessLevelModifierContext.prototype.Protected = function() {
    return this.getToken(LPCParser.Protected, 0);
};

AccessLevelModifierContext.prototype.Public = function() {
    return this.getToken(LPCParser.Public, 0);
};

AccessLevelModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterAccessLevelModifier(this);
	}
};

AccessLevelModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitAccessLevelModifier(this);
	}
};




LPCParser.AccessLevelModifierContext = AccessLevelModifierContext;

LPCParser.prototype.accessLevelModifier = function() {

    var localctx = new AccessLevelModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, LPCParser.RULE_accessLevelModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionTypeModifier;
    return this;
}

FunctionTypeModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeModifierContext.prototype.constructor = FunctionTypeModifierContext;

FunctionTypeModifierContext.prototype.NoMask = function() {
    return this.getToken(LPCParser.NoMask, 0);
};

FunctionTypeModifierContext.prototype.VarArgs = function() {
    return this.getToken(LPCParser.VarArgs, 0);
};

FunctionTypeModifierContext.prototype.Static = function() {
    return this.getToken(LPCParser.Static, 0);
};

FunctionTypeModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionTypeModifier(this);
	}
};

FunctionTypeModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionTypeModifier(this);
	}
};




LPCParser.FunctionTypeModifierContext = FunctionTypeModifierContext;

LPCParser.prototype.functionTypeModifier = function() {

    var localctx = new FunctionTypeModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, LPCParser.RULE_functionTypeModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 348;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.NoMask) | (1 << LPCParser.Static) | (1 << LPCParser.VarArgs))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionModifier;
    return this;
}

FunctionModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionModifierContext.prototype.constructor = FunctionModifierContext;

FunctionModifierContext.prototype.accessLevelModifier = function() {
    return this.getTypedRuleContext(AccessLevelModifierContext,0);
};

FunctionModifierContext.prototype.functionTypeModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionTypeModifierContext);
    } else {
        return this.getTypedRuleContext(FunctionTypeModifierContext,i);
    }
};

FunctionModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionModifier(this);
	}
};

FunctionModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionModifier(this);
	}
};




LPCParser.FunctionModifierContext = FunctionModifierContext;

LPCParser.prototype.functionModifier = function() {

    var localctx = new FunctionModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, LPCParser.RULE_functionModifier);
    var _la = 0; // Token type
    try {
        this.state = 365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0)) {
                this.state = 350;
                this.accessLevelModifier();
            }

            this.state = 354; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 353;
                this.functionTypeModifier();
                this.state = 356; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.NoMask) | (1 << LPCParser.Static) | (1 << LPCParser.VarArgs))) !== 0));
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 361;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.NoMask) | (1 << LPCParser.Static) | (1 << LPCParser.VarArgs))) !== 0)) {
                this.state = 358;
                this.functionTypeModifier();
                this.state = 363;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 364;
            this.accessLevelModifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_classDefinition;
    return this;
}

ClassDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDefinitionContext.prototype.constructor = ClassDefinitionContext;

ClassDefinitionContext.prototype.classIdentifier = function() {
    return this.getTypedRuleContext(ClassIdentifierContext,0);
};

ClassDefinitionContext.prototype.LeftBrace = function() {
    return this.getToken(LPCParser.LeftBrace, 0);
};

ClassDefinitionContext.prototype.RightBrace = function() {
    return this.getToken(LPCParser.RightBrace, 0);
};

ClassDefinitionContext.prototype.classMembers = function() {
    return this.getTypedRuleContext(ClassMembersContext,0);
};

ClassDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterClassDefinition(this);
	}
};

ClassDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitClassDefinition(this);
	}
};




LPCParser.ClassDefinitionContext = ClassDefinitionContext;

LPCParser.prototype.classDefinition = function() {

    var localctx = new ClassDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, LPCParser.RULE_classDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.classIdentifier();
        this.state = 368;
        this.match(LPCParser.LeftBrace);
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Class))) !== 0) || _la===LPCParser.Array || _la===LPCParser.Multiply) {
            this.state = 369;
            this.classMembers();
        }

        this.state = 372;
        this.match(LPCParser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_classIdentifier;
    return this;
}

ClassIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassIdentifierContext.prototype.constructor = ClassIdentifierContext;

ClassIdentifierContext.prototype.Class = function() {
    return this.getToken(LPCParser.Class, 0);
};

ClassIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassIdentifierContext.prototype.accessLevelModifier = function() {
    return this.getTypedRuleContext(AccessLevelModifierContext,0);
};

ClassIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterClassIdentifier(this);
	}
};

ClassIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitClassIdentifier(this);
	}
};




LPCParser.ClassIdentifierContext = ClassIdentifierContext;

LPCParser.prototype.classIdentifier = function() {

    var localctx = new ClassIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, LPCParser.RULE_classIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0)) {
            this.state = 374;
            this.accessLevelModifier();
        }

        this.state = 377;
        this.match(LPCParser.Class);
        this.state = 378;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassMembersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_classMembers;
    return this;
}

ClassMembersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMembersContext.prototype.constructor = ClassMembersContext;

ClassMembersContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

ClassMembersContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterClassMembers(this);
	}
};

ClassMembersContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitClassMembers(this);
	}
};




LPCParser.ClassMembersContext = ClassMembersContext;

LPCParser.prototype.classMembers = function() {

    var localctx = new ClassMembersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, LPCParser.RULE_classMembers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 381; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 380;
            this.variableDeclaration();
            this.state = 383; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Class))) !== 0) || _la===LPCParser.Array || _la===LPCParser.Multiply);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassMemberInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_classMemberInitializer;
    return this;
}

ClassMemberInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMemberInitializerContext.prototype.constructor = ClassMemberInitializerContext;

ClassMemberInitializerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassMemberInitializerContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

ClassMemberInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ClassMemberInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterClassMemberInitializer(this);
	}
};

ClassMemberInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitClassMemberInitializer(this);
	}
};




LPCParser.ClassMemberInitializerContext = ClassMemberInitializerContext;

LPCParser.prototype.classMemberInitializer = function() {

    var localctx = new ClassMemberInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, LPCParser.RULE_classMemberInitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 385;
        this.identifier();
        this.state = 386;
        this.match(LPCParser.Colon);
        this.state = 387;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.accessLevelModifier = function() {
    return this.getTypedRuleContext(AccessLevelModifierContext,0);
};

VariableModifierContext.prototype.NoSave = function() {
    return this.getToken(LPCParser.NoSave, 0);
};

VariableModifierContext.prototype.Static = function() {
    return this.getToken(LPCParser.Static, 0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitVariableModifier(this);
	}
};




LPCParser.VariableModifierContext = VariableModifierContext;

LPCParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, LPCParser.RULE_variableModifier);
    var _la = 0; // Token type
    try {
        this.state = 405;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LPCParser.NoSave) {
                this.state = 389;
                this.match(LPCParser.NoSave);
            }

            this.state = 392;
            this.accessLevelModifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0)) {
                this.state = 393;
                this.accessLevelModifier();
            }

            this.state = 396;
            this.match(LPCParser.NoSave);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 398;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LPCParser.Static) {
                this.state = 397;
                this.match(LPCParser.Static);
            }

            this.state = 400;
            this.accessLevelModifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0)) {
                this.state = 401;
                this.accessLevelModifier();
            }

            this.state = 404;
            this.match(LPCParser.Static);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_variableList;
    return this;
}

VariableListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableListContext.prototype.constructor = VariableListContext;

VariableListContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

VariableListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


VariableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterVariableList(this);
	}
};

VariableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitVariableList(this);
	}
};




LPCParser.VariableListContext = VariableListContext;

LPCParser.prototype.variableList = function() {

    var localctx = new VariableListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, LPCParser.RULE_variableList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.variable();
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LPCParser.Comma) {
            this.state = 408;
            this.match(LPCParser.Comma);
            this.state = 409;
            this.variable();
            this.state = 414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VariableContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

VariableContext.prototype.variableAssignmentExpression = function() {
    return this.getTypedRuleContext(VariableAssignmentExpressionContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitVariable(this);
	}
};




LPCParser.VariableContext = VariableContext;

LPCParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, LPCParser.RULE_variable);
    var _la = 0; // Token type
    try {
        this.state = 425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LPCParser.Array || _la===LPCParser.Multiply) {
                this.state = 415;
                this.array();
            }

            this.state = 418;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LPCParser.Array || _la===LPCParser.Multiply) {
                this.state = 419;
                this.array();
            }

            this.state = 422;
            this.identifier();
            this.state = 423;
            this.variableAssignmentExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableAssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_variableAssignmentExpression;
    return this;
}

VariableAssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableAssignmentExpressionContext.prototype.constructor = VariableAssignmentExpressionContext;

VariableAssignmentExpressionContext.prototype.Assign = function() {
    return this.getToken(LPCParser.Assign, 0);
};

VariableAssignmentExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableAssignmentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterVariableAssignmentExpression(this);
	}
};

VariableAssignmentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitVariableAssignmentExpression(this);
	}
};




LPCParser.VariableAssignmentExpressionContext = VariableAssignmentExpressionContext;

LPCParser.prototype.variableAssignmentExpression = function() {

    var localctx = new VariableAssignmentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, LPCParser.RULE_variableAssignmentExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.match(LPCParser.Assign);
        this.state = 428;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.Multiply = function() {
    return this.getToken(LPCParser.Multiply, 0);
};

ArrayContext.prototype.Array = function() {
    return this.getToken(LPCParser.Array, 0);
};

ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitArray(this);
	}
};




LPCParser.ArrayContext = ArrayContext;

LPCParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, LPCParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        _la = this._input.LA(1);
        if(!(_la===LPCParser.Array || _la===LPCParser.Multiply)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.LessThan = function() {
    return this.getToken(LPCParser.LessThan, 0);
};

ComparisonOperatorContext.prototype.LessThanEqualTo = function() {
    return this.getToken(LPCParser.LessThanEqualTo, 0);
};

ComparisonOperatorContext.prototype.GreaterThan = function() {
    return this.getToken(LPCParser.GreaterThan, 0);
};

ComparisonOperatorContext.prototype.GreaterThanEqualTo = function() {
    return this.getToken(LPCParser.GreaterThanEqualTo, 0);
};

ComparisonOperatorContext.prototype.Equals = function() {
    return this.getToken(LPCParser.Equals, 0);
};

ComparisonOperatorContext.prototype.NotEquals = function() {
    return this.getToken(LPCParser.NotEquals, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitComparisonOperator(this);
	}
};




LPCParser.ComparisonOperatorContext = ComparisonOperatorContext;

LPCParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, LPCParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        _la = this._input.LA(1);
        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (LPCParser.Equals - 51)) | (1 << (LPCParser.NotEquals - 51)) | (1 << (LPCParser.LessThanEqualTo - 51)) | (1 << (LPCParser.GreaterThanEqualTo - 51)) | (1 << (LPCParser.LessThan - 51)) | (1 << (LPCParser.GreaterThan - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogicalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_logicalOperator;
    return this;
}

LogicalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOperatorContext.prototype.constructor = LogicalOperatorContext;

LogicalOperatorContext.prototype.Or = function() {
    return this.getToken(LPCParser.Or, 0);
};

LogicalOperatorContext.prototype.And = function() {
    return this.getToken(LPCParser.And, 0);
};

LogicalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitLogicalOperator(this);
	}
};




LPCParser.LogicalOperatorContext = LogicalOperatorContext;

LPCParser.prototype.logicalOperator = function() {

    var localctx = new LogicalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, LPCParser.RULE_logicalOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        _la = this._input.LA(1);
        if(!(_la===LPCParser.And || _la===LPCParser.Or)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_bitOperator;
    return this;
}

BitOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitOperatorContext.prototype.constructor = BitOperatorContext;

BitOperatorContext.prototype.BitOr = function() {
    return this.getToken(LPCParser.BitOr, 0);
};

BitOperatorContext.prototype.BitAnd = function() {
    return this.getToken(LPCParser.BitAnd, 0);
};

BitOperatorContext.prototype.BitXor = function() {
    return this.getToken(LPCParser.BitXor, 0);
};

BitOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterBitOperator(this);
	}
};

BitOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitBitOperator(this);
	}
};




LPCParser.BitOperatorContext = BitOperatorContext;

LPCParser.prototype.bitOperator = function() {

    var localctx = new BitOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, LPCParser.RULE_bitOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        _la = this._input.LA(1);
        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (LPCParser.BitXor - 41)) | (1 << (LPCParser.BitAnd - 41)) | (1 << (LPCParser.BitOr - 41)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArithmeticOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_arithmeticOperator;
    return this;
}

ArithmeticOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArithmeticOperatorContext.prototype.constructor = ArithmeticOperatorContext;

ArithmeticOperatorContext.prototype.LeftShift = function() {
    return this.getToken(LPCParser.LeftShift, 0);
};

ArithmeticOperatorContext.prototype.RightShift = function() {
    return this.getToken(LPCParser.RightShift, 0);
};

ArithmeticOperatorContext.prototype.Add = function() {
    return this.getToken(LPCParser.Add, 0);
};

ArithmeticOperatorContext.prototype.Subtract = function() {
    return this.getToken(LPCParser.Subtract, 0);
};

ArithmeticOperatorContext.prototype.Multiply = function() {
    return this.getToken(LPCParser.Multiply, 0);
};

ArithmeticOperatorContext.prototype.Divide = function() {
    return this.getToken(LPCParser.Divide, 0);
};

ArithmeticOperatorContext.prototype.Modulus = function() {
    return this.getToken(LPCParser.Modulus, 0);
};

ArithmeticOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterArithmeticOperator(this);
	}
};

ArithmeticOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitArithmeticOperator(this);
	}
};




LPCParser.ArithmeticOperatorContext = ArithmeticOperatorContext;

LPCParser.prototype.arithmeticOperator = function() {

    var localctx = new ArithmeticOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, LPCParser.RULE_arithmeticOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (LPCParser.LeftShift - 52)) | (1 << (LPCParser.RightShift - 52)) | (1 << (LPCParser.Add - 52)) | (1 << (LPCParser.Subtract - 52)) | (1 << (LPCParser.Modulus - 52)) | (1 << (LPCParser.Divide - 52)))) !== 0) || _la===LPCParser.Multiply)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionalDeclaration;
    return this;
}

FunctionalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionalDeclarationContext.prototype.constructor = FunctionalDeclarationContext;

FunctionalDeclarationContext.prototype.functionalStart = function() {
    return this.getTypedRuleContext(FunctionalStartContext,0);
};

FunctionalDeclarationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

FunctionalDeclarationContext.prototype.functionalEnd = function() {
    return this.getTypedRuleContext(FunctionalEndContext,0);
};

FunctionalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionalDeclaration(this);
	}
};

FunctionalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionalDeclaration(this);
	}
};




LPCParser.FunctionalDeclarationContext = FunctionalDeclarationContext;

LPCParser.prototype.functionalDeclaration = function() {

    var localctx = new FunctionalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, LPCParser.RULE_functionalDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.functionalStart();
        this.state = 441;
        this.expressionList();
        this.state = 442;
        this.functionalEnd();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnonymousFunctionalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_anonymousFunctionalDeclaration;
    return this;
}

AnonymousFunctionalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousFunctionalDeclarationContext.prototype.constructor = AnonymousFunctionalDeclarationContext;

AnonymousFunctionalDeclarationContext.prototype.Function = function() {
    return this.getToken(LPCParser.Function, 0);
};

AnonymousFunctionalDeclarationContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

AnonymousFunctionalDeclarationContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

AnonymousFunctionalDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

AnonymousFunctionalDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

AnonymousFunctionalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterAnonymousFunctionalDeclaration(this);
	}
};

AnonymousFunctionalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitAnonymousFunctionalDeclaration(this);
	}
};




LPCParser.AnonymousFunctionalDeclarationContext = AnonymousFunctionalDeclarationContext;

LPCParser.prototype.anonymousFunctionalDeclaration = function() {

    var localctx = new AnonymousFunctionalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, LPCParser.RULE_anonymousFunctionalDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 444;
        this.match(LPCParser.Function);
        this.state = 445;
        this.match(LPCParser.LeftParen);
        this.state = 447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Class))) !== 0) || _la===LPCParser.Array || _la===LPCParser.Multiply) {
            this.state = 446;
            this.parameterList();
        }

        this.state = 449;
        this.match(LPCParser.RightParen);
        this.state = 450;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionalStartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionalStart;
    return this;
}

FunctionalStartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionalStartContext.prototype.constructor = FunctionalStartContext;

FunctionalStartContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

FunctionalStartContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

FunctionalStartContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionalStart(this);
	}
};

FunctionalStartContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionalStart(this);
	}
};




LPCParser.FunctionalStartContext = FunctionalStartContext;

LPCParser.prototype.functionalStart = function() {

    var localctx = new FunctionalStartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, LPCParser.RULE_functionalStart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this.match(LPCParser.LeftParen);
        this.state = 453;
        this.match(LPCParser.Colon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionalEndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionalEnd;
    return this;
}

FunctionalEndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionalEndContext.prototype.constructor = FunctionalEndContext;

FunctionalEndContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

FunctionalEndContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

FunctionalEndContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionalEnd(this);
	}
};

FunctionalEndContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionalEnd(this);
	}
};




LPCParser.FunctionalEndContext = FunctionalEndContext;

LPCParser.prototype.functionalEnd = function() {

    var localctx = new FunctionalEndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, LPCParser.RULE_functionalEnd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.match(LPCParser.Colon);
        this.state = 456;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionalParameter;
    return this;
}

FunctionalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionalParameterContext.prototype.constructor = FunctionalParameterContext;

FunctionalParameterContext.prototype.FunctionalScope = function() {
    return this.getToken(LPCParser.FunctionalScope, 0);
};

FunctionalParameterContext.prototype.IntegerLiteral = function() {
    return this.getToken(LPCParser.IntegerLiteral, 0);
};

FunctionalParameterContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

FunctionalParameterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionalParameterContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

FunctionalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionalParameter(this);
	}
};

FunctionalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionalParameter(this);
	}
};




LPCParser.FunctionalParameterContext = FunctionalParameterContext;

LPCParser.prototype.functionalParameter = function() {

    var localctx = new FunctionalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, LPCParser.RULE_functionalParameter);
    try {
        this.state = 465;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.match(LPCParser.FunctionalScope);
            this.state = 459;
            this.match(LPCParser.IntegerLiteral);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 460;
            this.match(LPCParser.FunctionalScope);
            this.state = 461;
            this.match(LPCParser.LeftParen);
            this.state = 462;
            this.expression(0);
            this.state = 463;
            this.match(LPCParser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CastOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_castOperation;
    return this;
}

CastOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastOperationContext.prototype.constructor = CastOperationContext;

CastOperationContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

CastOperationContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

CastOperationContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

CastOperationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastOperationContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

CastOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterCastOperation(this);
	}
};

CastOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitCastOperation(this);
	}
};




LPCParser.CastOperationContext = CastOperationContext;

LPCParser.prototype.castOperation = function() {

    var localctx = new CastOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, LPCParser.RULE_castOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 467;
        this.match(LPCParser.LeftParen);
        this.state = 468;
        this.dataType();
        this.state = 470;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Array || _la===LPCParser.Multiply) {
            this.state = 469;
            this.array();
        }

        this.state = 472;
        this.match(LPCParser.RightParen);
        this.state = 473;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

ExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExpressionContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

ExpressionContext.prototype.scopedFunctionCall = function() {
    return this.getTypedRuleContext(ScopedFunctionCallContext,0);
};

ExpressionContext.prototype.functionalDeclaration = function() {
    return this.getTypedRuleContext(FunctionalDeclarationContext,0);
};

ExpressionContext.prototype.anonymousFunctionalDeclaration = function() {
    return this.getTypedRuleContext(AnonymousFunctionalDeclarationContext,0);
};

ExpressionContext.prototype.mappingDeclaration = function() {
    return this.getTypedRuleContext(MappingDeclarationContext,0);
};

ExpressionContext.prototype.arrayDeclaration = function() {
    return this.getTypedRuleContext(ArrayDeclarationContext,0);
};

ExpressionContext.prototype.catchExpression = function() {
    return this.getTypedRuleContext(CatchExpressionContext,0);
};

ExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

ExpressionContext.prototype.incrementExpression = function() {
    return this.getTypedRuleContext(IncrementExpressionContext,0);
};

ExpressionContext.prototype.decrementExpression = function() {
    return this.getTypedRuleContext(DecrementExpressionContext,0);
};

ExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

ExpressionContext.prototype.notExpression = function() {
    return this.getTypedRuleContext(NotExpressionContext,0);
};

ExpressionContext.prototype.castOperation = function() {
    return this.getTypedRuleContext(CastOperationContext,0);
};

ExpressionContext.prototype.functionalParameter = function() {
    return this.getTypedRuleContext(FunctionalParameterContext,0);
};

ExpressionContext.prototype.stringConcatExpression = function() {
    return this.getTypedRuleContext(StringConcatExpressionContext,0);
};

ExpressionContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

ExpressionContext.prototype.indexOperator = function() {
    return this.getTypedRuleContext(IndexOperatorContext,0);
};

ExpressionContext.prototype.memberIdentifier = function() {
    return this.getTypedRuleContext(MemberIdentifierContext,0);
};

ExpressionContext.prototype.ternaryExpression = function() {
    return this.getTypedRuleContext(TernaryExpressionContext,0);
};

ExpressionContext.prototype.Ellipsis = function() {
    return this.getToken(LPCParser.Ellipsis, 0);
};

ExpressionContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitExpression(this);
	}
};



LPCParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, LPCParser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.state = 476;
            this.match(LPCParser.LeftParen);
            this.state = 477;
            this.expression(0);
            this.state = 478;
            this.match(LPCParser.RightParen);
            break;

        case 2:
            this.state = 480;
            this.literal();
            break;

        case 3:
            this.state = 481;
            this.identifier();
            break;

        case 4:
            this.state = 482;
            this.functionCall();
            break;

        case 5:
            this.state = 483;
            this.scopedFunctionCall();
            break;

        case 6:
            this.state = 484;
            this.functionalDeclaration();
            break;

        case 7:
            this.state = 485;
            this.anonymousFunctionalDeclaration();
            break;

        case 8:
            this.state = 486;
            this.mappingDeclaration();
            break;

        case 9:
            this.state = 487;
            this.arrayDeclaration();
            break;

        case 10:
            this.state = 488;
            this.catchExpression();
            break;

        case 11:
            this.state = 489;
            this.newExpression();
            break;

        case 12:
            this.state = 492;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LPCParser.PlusPlus:
                this.state = 490;
                this.incrementExpression();
                break;
            case LPCParser.MinusMinus:
                this.state = 491;
                this.decrementExpression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 494;
            this.expression(10);
            break;

        case 13:
            this.state = 496;
            this.unaryOperator();
            break;

        case 14:
            this.state = 497;
            this.notExpression();
            break;

        case 15:
            this.state = 498;
            this.castOperation();
            break;

        case 16:
            this.state = 499;
            this.functionalParameter();
            break;

        case 17:
            this.state = 500;
            this.stringConcatExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 528;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 526;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 503;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 504;
                    this.operator();
                    this.state = 505;
                    this.expression(7);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 507;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 510;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case LPCParser.PlusPlus:
                        this.state = 508;
                        this.incrementExpression();
                        break;
                    case LPCParser.MinusMinus:
                        this.state = 509;
                        this.decrementExpression();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 512;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 513;
                    this.indexOperator();
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 514;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 515;
                    this.memberIdentifier();
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 516;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 517;
                    this.ternaryExpression();
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 518;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 519;
                    this.match(LPCParser.Ellipsis);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, LPCParser.RULE_expression);
                    this.state = 520;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 522; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 521;
                    		this.comment();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 524; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,42, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;

                } 
            }
            this.state = 530;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TernaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_ternaryExpression;
    return this;
}

TernaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

TernaryExpressionContext.prototype.Question = function() {
    return this.getToken(LPCParser.Question, 0);
};

TernaryExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TernaryExpressionContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

TernaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterTernaryExpression(this);
	}
};

TernaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitTernaryExpression(this);
	}
};




LPCParser.TernaryExpressionContext = TernaryExpressionContext;

LPCParser.prototype.ternaryExpression = function() {

    var localctx = new TernaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, LPCParser.RULE_ternaryExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 531;
        this.match(LPCParser.Question);
        this.state = 532;
        this.expression(0);
        this.state = 533;
        this.match(LPCParser.Colon);
        this.state = 534;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringConcatExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_stringConcatExpression;
    return this;
}

StringConcatExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringConcatExpressionContext.prototype.constructor = StringConcatExpressionContext;

StringConcatExpressionContext.prototype.StringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.StringLiteral);
    } else {
        return this.getToken(LPCParser.StringLiteral, i);
    }
};


StringConcatExpressionContext.prototype.stringConcatExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringConcatExpressionContext);
    } else {
        return this.getTypedRuleContext(StringConcatExpressionContext,i);
    }
};

StringConcatExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StringConcatExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterStringConcatExpression(this);
	}
};

StringConcatExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitStringConcatExpression(this);
	}
};




LPCParser.StringConcatExpressionContext = StringConcatExpressionContext;

LPCParser.prototype.stringConcatExpression = function() {

    var localctx = new StringConcatExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, LPCParser.RULE_stringConcatExpression);
    try {
        this.state = 555;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.StringLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 537; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 536;
            		this.match(LPCParser.StringLiteral);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 539; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,45, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 544;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 541;
                    this.stringConcatExpression(); 
                }
                this.state = 546;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            break;
        case LPCParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 547;
            this.identifier();
            this.state = 548;
            this.match(LPCParser.StringLiteral);
            this.state = 552;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 549;
                    this.stringConcatExpression(); 
                }
                this.state = 554;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_memberIdentifier;
    return this;
}

MemberIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberIdentifierContext.prototype.constructor = MemberIdentifierContext;

MemberIdentifierContext.prototype.MemberOperator = function() {
    return this.getToken(LPCParser.MemberOperator, 0);
};

MemberIdentifierContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

MemberIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

MemberIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterMemberIdentifier(this);
	}
};

MemberIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitMemberIdentifier(this);
	}
};




LPCParser.MemberIdentifierContext = MemberIdentifierContext;

LPCParser.prototype.memberIdentifier = function() {

    var localctx = new MemberIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, LPCParser.RULE_memberIdentifier);
    try {
        this.state = 561;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 557;
            this.match(LPCParser.MemberOperator);
            this.state = 558;
            this.functionCall();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 559;
            this.match(LPCParser.MemberOperator);
            this.state = 560;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncrementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_incrementExpression;
    return this;
}

IncrementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncrementExpressionContext.prototype.constructor = IncrementExpressionContext;

IncrementExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(LPCParser.PlusPlus, 0);
};

IncrementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterIncrementExpression(this);
	}
};

IncrementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitIncrementExpression(this);
	}
};




LPCParser.IncrementExpressionContext = IncrementExpressionContext;

LPCParser.prototype.incrementExpression = function() {

    var localctx = new IncrementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, LPCParser.RULE_incrementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.match(LPCParser.PlusPlus);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecrementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_decrementExpression;
    return this;
}

DecrementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecrementExpressionContext.prototype.constructor = DecrementExpressionContext;

DecrementExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(LPCParser.MinusMinus, 0);
};

DecrementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDecrementExpression(this);
	}
};

DecrementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDecrementExpression(this);
	}
};




LPCParser.DecrementExpressionContext = DecrementExpressionContext;

LPCParser.prototype.decrementExpression = function() {

    var localctx = new DecrementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, LPCParser.RULE_decrementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.match(LPCParser.MinusMinus);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_catchExpression;
    return this;
}

CatchExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchExpressionContext.prototype.constructor = CatchExpressionContext;

CatchExpressionContext.prototype.Catch = function() {
    return this.getToken(LPCParser.Catch, 0);
};

CatchExpressionContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

CatchExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CatchExpressionContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

CatchExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterCatchExpression(this);
	}
};

CatchExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitCatchExpression(this);
	}
};




LPCParser.CatchExpressionContext = CatchExpressionContext;

LPCParser.prototype.catchExpression = function() {

    var localctx = new CatchExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, LPCParser.RULE_catchExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.match(LPCParser.Catch);
        this.state = 568;
        this.match(LPCParser.LeftParen);
        this.state = 569;
        this.expression(0);
        this.state = 570;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NewExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_newExpression;
    return this;
}

NewExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
    return this.getToken(LPCParser.New, 0);
};

NewExpressionContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

NewExpressionContext.prototype.newExpressionIdentifier = function() {
    return this.getTypedRuleContext(NewExpressionIdentifierContext,0);
};

NewExpressionContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

NewExpressionContext.prototype.Comma = function() {
    return this.getToken(LPCParser.Comma, 0);
};

NewExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitNewExpression(this);
	}
};




LPCParser.NewExpressionContext = NewExpressionContext;

LPCParser.prototype.newExpression = function() {

    var localctx = new NewExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, LPCParser.RULE_newExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(LPCParser.New);
        this.state = 573;
        this.match(LPCParser.LeftParen);
        this.state = 574;
        this.newExpressionIdentifier();
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Comma) {
            this.state = 575;
            this.match(LPCParser.Comma);
            this.state = 576;
            this.expressionList();
        }

        this.state = 579;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NewExpressionIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_newExpressionIdentifier;
    return this;
}

NewExpressionIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExpressionIdentifierContext.prototype.constructor = NewExpressionIdentifierContext;

NewExpressionIdentifierContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NewExpressionIdentifierContext.prototype.classIdentifier = function() {
    return this.getTypedRuleContext(ClassIdentifierContext,0);
};

NewExpressionIdentifierContext.prototype.Comma = function() {
    return this.getToken(LPCParser.Comma, 0);
};

NewExpressionIdentifierContext.prototype.classMemberInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassMemberInitializerContext);
    } else {
        return this.getTypedRuleContext(ClassMemberInitializerContext,i);
    }
};

NewExpressionIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterNewExpressionIdentifier(this);
	}
};

NewExpressionIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitNewExpressionIdentifier(this);
	}
};




LPCParser.NewExpressionIdentifierContext = NewExpressionIdentifierContext;

LPCParser.prototype.newExpressionIdentifier = function() {

    var localctx = new NewExpressionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, LPCParser.RULE_newExpressionIdentifier);
    var _la = 0; // Token type
    try {
        this.state = 591;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Function:
        case LPCParser.Object:
        case LPCParser.Catch:
        case LPCParser.Efun:
        case LPCParser.New:
        case LPCParser.PlusPlus:
        case LPCParser.MinusMinus:
        case LPCParser.ScopeOperator:
        case LPCParser.Add:
        case LPCParser.Subtract:
        case LPCParser.Not:
        case LPCParser.LeftParen:
        case LPCParser.FunctionalScope:
        case LPCParser.Identifier:
        case LPCParser.IntegerLiteral:
        case LPCParser.FloatLiteral:
        case LPCParser.StringLiteral:
        case LPCParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 581;
            this.expression(0);
            break;
        case LPCParser.Private:
        case LPCParser.Protected:
        case LPCParser.Public:
        case LPCParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 582;
            this.classIdentifier();
            this.state = 589;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 583;
                this.match(LPCParser.Comma);
                this.state = 585; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 584;
                    this.classMemberInitializer();
                    this.state = 587; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LPCParser.Identifier);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;

OperatorContext.prototype.arithmeticOperator = function() {
    return this.getTypedRuleContext(ArithmeticOperatorContext,0);
};

OperatorContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

OperatorContext.prototype.bitOperator = function() {
    return this.getTypedRuleContext(BitOperatorContext,0);
};

OperatorContext.prototype.logicalOperator = function() {
    return this.getTypedRuleContext(LogicalOperatorContext,0);
};

OperatorContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

OperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterOperator(this);
	}
};

OperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitOperator(this);
	}
};




LPCParser.OperatorContext = OperatorContext;

LPCParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, LPCParser.RULE_operator);
    try {
        this.state = 598;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.LeftShift:
        case LPCParser.RightShift:
        case LPCParser.Add:
        case LPCParser.Subtract:
        case LPCParser.Modulus:
        case LPCParser.Divide:
        case LPCParser.Multiply:
            this.enterOuterAlt(localctx, 1);
            this.state = 593;
            this.arithmeticOperator();
            break;
        case LPCParser.Equals:
        case LPCParser.NotEquals:
        case LPCParser.LessThanEqualTo:
        case LPCParser.GreaterThanEqualTo:
        case LPCParser.LessThan:
        case LPCParser.GreaterThan:
            this.enterOuterAlt(localctx, 2);
            this.state = 594;
            this.comparisonOperator();
            break;
        case LPCParser.BitXor:
        case LPCParser.BitAnd:
        case LPCParser.BitOr:
            this.enterOuterAlt(localctx, 3);
            this.state = 595;
            this.bitOperator();
            break;
        case LPCParser.And:
        case LPCParser.Or:
            this.enterOuterAlt(localctx, 4);
            this.state = 596;
            this.logicalOperator();
            break;
        case LPCParser.AddAssign:
        case LPCParser.SubtractAssign:
        case LPCParser.BitAndAssign:
        case LPCParser.BitOrAssign:
        case LPCParser.BitXorAssign:
        case LPCParser.ModulusAssign:
        case LPCParser.DivideAssign:
        case LPCParser.LeftShiftAssign:
        case LPCParser.RightShiftAssign:
        case LPCParser.MultiplyAssign:
        case LPCParser.Assign:
            this.enterOuterAlt(localctx, 5);
            this.state = 597;
            this.assignmentOperator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.Assign = function() {
    return this.getToken(LPCParser.Assign, 0);
};

AssignmentOperatorContext.prototype.AddAssign = function() {
    return this.getToken(LPCParser.AddAssign, 0);
};

AssignmentOperatorContext.prototype.SubtractAssign = function() {
    return this.getToken(LPCParser.SubtractAssign, 0);
};

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(LPCParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(LPCParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModulusAssign = function() {
    return this.getToken(LPCParser.ModulusAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftAssign = function() {
    return this.getToken(LPCParser.LeftShiftAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftAssign = function() {
    return this.getToken(LPCParser.RightShiftAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(LPCParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(LPCParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(LPCParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitAssignmentOperator(this);
	}
};




LPCParser.AssignmentOperatorContext = AssignmentOperatorContext;

LPCParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, LPCParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.state = 605;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 600;
            this.match(LPCParser.Assign);
            break;
        case LPCParser.AddAssign:
        case LPCParser.SubtractAssign:
            this.enterOuterAlt(localctx, 2);
            this.state = 601;
            _la = this._input.LA(1);
            if(!(_la===LPCParser.AddAssign || _la===LPCParser.SubtractAssign)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case LPCParser.ModulusAssign:
        case LPCParser.DivideAssign:
        case LPCParser.MultiplyAssign:
            this.enterOuterAlt(localctx, 3);
            this.state = 602;
            _la = this._input.LA(1);
            if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (LPCParser.ModulusAssign - 43)) | (1 << (LPCParser.DivideAssign - 43)) | (1 << (LPCParser.MultiplyAssign - 43)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case LPCParser.LeftShiftAssign:
        case LPCParser.RightShiftAssign:
            this.enterOuterAlt(localctx, 4);
            this.state = 603;
            _la = this._input.LA(1);
            if(!(_la===LPCParser.LeftShiftAssign || _la===LPCParser.RightShiftAssign)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case LPCParser.BitAndAssign:
        case LPCParser.BitOrAssign:
        case LPCParser.BitXorAssign:
            this.enterOuterAlt(localctx, 5);
            this.state = 604;
            _la = this._input.LA(1);
            if(!(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (LPCParser.BitAndAssign - 39)) | (1 << (LPCParser.BitOrAssign - 39)) | (1 << (LPCParser.BitXorAssign - 39)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NotExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_notExpression;
    return this;
}

NotExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

NotExpressionContext.prototype.Not = function() {
    return this.getToken(LPCParser.Not, 0);
};

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitNotExpression(this);
	}
};




LPCParser.NotExpressionContext = NotExpressionContext;

LPCParser.prototype.notExpression = function() {

    var localctx = new NotExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, LPCParser.RULE_notExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.match(LPCParser.Not);
        this.state = 608;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.Add = function() {
    return this.getToken(LPCParser.Add, 0);
};

UnaryOperatorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnaryOperatorContext.prototype.Subtract = function() {
    return this.getToken(LPCParser.Subtract, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitUnaryOperator(this);
	}
};




LPCParser.UnaryOperatorContext = UnaryOperatorContext;

LPCParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, LPCParser.RULE_unaryOperator);
    try {
        this.state = 614;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Add:
            this.enterOuterAlt(localctx, 1);
            this.state = 610;
            this.match(LPCParser.Add);
            this.state = 611;
            this.expression(0);
            break;
        case LPCParser.Subtract:
            this.enterOuterAlt(localctx, 2);
            this.state = 612;
            this.match(LPCParser.Subtract);
            this.state = 613;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(LPCParser.StringLiteral, 0);
};

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(LPCParser.IntegerLiteral, 0);
};

LiteralContext.prototype.FloatLiteral = function() {
    return this.getToken(LPCParser.FloatLiteral, 0);
};

LiteralContext.prototype.CharacterLiteral = function() {
    return this.getToken(LPCParser.CharacterLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitLiteral(this);
	}
};




LPCParser.LiteralContext = LiteralContext;

LPCParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, LPCParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        _la = this._input.LA(1);
        if(!(((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (LPCParser.IntegerLiteral - 98)) | (1 << (LPCParser.FloatLiteral - 98)) | (1 << (LPCParser.StringLiteral - 98)) | (1 << (LPCParser.CharacterLiteral - 98)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_mappingDeclaration;
    return this;
}

MappingDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingDeclarationContext.prototype.constructor = MappingDeclarationContext;

MappingDeclarationContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

MappingDeclarationContext.prototype.LeftBracket = function() {
    return this.getToken(LPCParser.LeftBracket, 0);
};

MappingDeclarationContext.prototype.RightBracket = function() {
    return this.getToken(LPCParser.RightBracket, 0);
};

MappingDeclarationContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

MappingDeclarationContext.prototype.mappingElementList = function() {
    return this.getTypedRuleContext(MappingElementListContext,0);
};

MappingDeclarationContext.prototype.Comma = function() {
    return this.getToken(LPCParser.Comma, 0);
};

MappingDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterMappingDeclaration(this);
	}
};

MappingDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitMappingDeclaration(this);
	}
};




LPCParser.MappingDeclarationContext = MappingDeclarationContext;

LPCParser.prototype.mappingDeclaration = function() {

    var localctx = new MappingDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, LPCParser.RULE_mappingDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(LPCParser.LeftParen);
        this.state = 619;
        this.match(LPCParser.LeftBracket);
        this.state = 621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (LPCParser.Function - 10)) | (1 << (LPCParser.Object - 10)) | (1 << (LPCParser.Catch - 10)) | (1 << (LPCParser.Efun - 10)) | (1 << (LPCParser.New - 10)))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (LPCParser.PlusPlus - 47)) | (1 << (LPCParser.MinusMinus - 47)) | (1 << (LPCParser.ScopeOperator - 47)) | (1 << (LPCParser.Add - 47)) | (1 << (LPCParser.Subtract - 47)) | (1 << (LPCParser.Not - 47)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (LPCParser.LeftParen - 82)) | (1 << (LPCParser.FunctionalScope - 82)) | (1 << (LPCParser.Identifier - 82)) | (1 << (LPCParser.BlockComment - 82)) | (1 << (LPCParser.LineComment - 82)) | (1 << (LPCParser.IntegerLiteral - 82)) | (1 << (LPCParser.FloatLiteral - 82)) | (1 << (LPCParser.StringLiteral - 82)) | (1 << (LPCParser.CharacterLiteral - 82)))) !== 0)) {
            this.state = 620;
            this.mappingElementList();
        }

        this.state = 624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Comma) {
            this.state = 623;
            this.match(LPCParser.Comma);
        }

        this.state = 626;
        this.match(LPCParser.RightBracket);
        this.state = 627;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_mappingElementList;
    return this;
}

MappingElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingElementListContext.prototype.constructor = MappingElementListContext;

MappingElementListContext.prototype.mappingElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MappingElementContext);
    } else {
        return this.getTypedRuleContext(MappingElementContext,i);
    }
};

MappingElementListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


MappingElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterMappingElementList(this);
	}
};

MappingElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitMappingElementList(this);
	}
};




LPCParser.MappingElementListContext = MappingElementListContext;

LPCParser.prototype.mappingElementList = function() {

    var localctx = new MappingElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, LPCParser.RULE_mappingElementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.mappingElement();
        this.state = 634;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 630;
                this.match(LPCParser.Comma);
                this.state = 631;
                this.mappingElement(); 
            }
            this.state = 636;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_mappingElement;
    return this;
}

MappingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingElementContext.prototype.constructor = MappingElementContext;

MappingElementContext.prototype.mappingKey = function() {
    return this.getTypedRuleContext(MappingKeyContext,0);
};

MappingElementContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

MappingElementContext.prototype.mappingValue = function() {
    return this.getTypedRuleContext(MappingValueContext,0);
};

MappingElementContext.prototype.mappingElement = function() {
    return this.getTypedRuleContext(MappingElementContext,0);
};

MappingElementContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

MappingElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterMappingElement(this);
	}
};

MappingElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitMappingElement(this);
	}
};




LPCParser.MappingElementContext = MappingElementContext;

LPCParser.prototype.mappingElement = function() {

    var localctx = new MappingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, LPCParser.RULE_mappingElement);
    try {
        this.state = 648;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Function:
        case LPCParser.Object:
        case LPCParser.Catch:
        case LPCParser.Efun:
        case LPCParser.New:
        case LPCParser.PlusPlus:
        case LPCParser.MinusMinus:
        case LPCParser.ScopeOperator:
        case LPCParser.Add:
        case LPCParser.Subtract:
        case LPCParser.Not:
        case LPCParser.LeftParen:
        case LPCParser.FunctionalScope:
        case LPCParser.Identifier:
        case LPCParser.IntegerLiteral:
        case LPCParser.FloatLiteral:
        case LPCParser.StringLiteral:
        case LPCParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 637;
            this.mappingKey();
            this.state = 638;
            this.match(LPCParser.Colon);
            this.state = 639;
            this.mappingValue();
            break;
        case LPCParser.BlockComment:
        case LPCParser.LineComment:
            this.enterOuterAlt(localctx, 2);
            this.state = 642; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 641;
            		this.comment();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 644; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,60, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 646;
            this.mappingElement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_mappingKey;
    return this;
}

MappingKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingKeyContext.prototype.constructor = MappingKeyContext;

MappingKeyContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

MappingKeyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MappingKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterMappingKey(this);
	}
};

MappingKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitMappingKey(this);
	}
};




LPCParser.MappingKeyContext = MappingKeyContext;

LPCParser.prototype.mappingKey = function() {

    var localctx = new MappingKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, LPCParser.RULE_mappingKey);
    try {
        this.state = 652;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 650;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 651;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MappingValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_mappingValue;
    return this;
}

MappingValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingValueContext.prototype.constructor = MappingValueContext;

MappingValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MappingValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterMappingValue(this);
	}
};

MappingValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitMappingValue(this);
	}
};




LPCParser.MappingValueContext = MappingValueContext;

LPCParser.prototype.mappingValue = function() {

    var localctx = new MappingValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, LPCParser.RULE_mappingValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_arrayDeclaration;
    return this;
}

ArrayDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayDeclarationContext.prototype.constructor = ArrayDeclarationContext;

ArrayDeclarationContext.prototype.arrayStart = function() {
    return this.getTypedRuleContext(ArrayStartContext,0);
};

ArrayDeclarationContext.prototype.arrayEnd = function() {
    return this.getTypedRuleContext(ArrayEndContext,0);
};

ArrayDeclarationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArrayDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterArrayDeclaration(this);
	}
};

ArrayDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitArrayDeclaration(this);
	}
};




LPCParser.ArrayDeclarationContext = ArrayDeclarationContext;

LPCParser.prototype.arrayDeclaration = function() {

    var localctx = new ArrayDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, LPCParser.RULE_arrayDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.arrayStart();
        this.state = 658;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (LPCParser.Function - 10)) | (1 << (LPCParser.Object - 10)) | (1 << (LPCParser.Catch - 10)) | (1 << (LPCParser.Efun - 10)) | (1 << (LPCParser.New - 10)))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (LPCParser.PlusPlus - 47)) | (1 << (LPCParser.MinusMinus - 47)) | (1 << (LPCParser.ScopeOperator - 47)) | (1 << (LPCParser.Add - 47)) | (1 << (LPCParser.Subtract - 47)) | (1 << (LPCParser.Not - 47)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (LPCParser.LeftParen - 82)) | (1 << (LPCParser.FunctionalScope - 82)) | (1 << (LPCParser.Identifier - 82)) | (1 << (LPCParser.IntegerLiteral - 82)) | (1 << (LPCParser.FloatLiteral - 82)) | (1 << (LPCParser.StringLiteral - 82)) | (1 << (LPCParser.CharacterLiteral - 82)))) !== 0)) {
            this.state = 657;
            this.expressionList();
        }

        this.state = 660;
        this.arrayEnd();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayStartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_arrayStart;
    return this;
}

ArrayStartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayStartContext.prototype.constructor = ArrayStartContext;

ArrayStartContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

ArrayStartContext.prototype.LeftBrace = function() {
    return this.getToken(LPCParser.LeftBrace, 0);
};

ArrayStartContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterArrayStart(this);
	}
};

ArrayStartContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitArrayStart(this);
	}
};




LPCParser.ArrayStartContext = ArrayStartContext;

LPCParser.prototype.arrayStart = function() {

    var localctx = new ArrayStartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, LPCParser.RULE_arrayStart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 662;
        this.match(LPCParser.LeftParen);
        this.state = 663;
        this.match(LPCParser.LeftBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayEndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_arrayEnd;
    return this;
}

ArrayEndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayEndContext.prototype.constructor = ArrayEndContext;

ArrayEndContext.prototype.RightBrace = function() {
    return this.getToken(LPCParser.RightBrace, 0);
};

ArrayEndContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

ArrayEndContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterArrayEnd(this);
	}
};

ArrayEndContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitArrayEnd(this);
	}
};




LPCParser.ArrayEndContext = ArrayEndContext;

LPCParser.prototype.arrayEnd = function() {

    var localctx = new ArrayEndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, LPCParser.RULE_arrayEnd);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.match(LPCParser.RightBrace);
        this.state = 666;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_indexOperator;
    return this;
}

IndexOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexOperatorContext.prototype.constructor = IndexOperatorContext;

IndexOperatorContext.prototype.LeftBracket = function() {
    return this.getToken(LPCParser.LeftBracket, 0);
};

IndexOperatorContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

IndexOperatorContext.prototype.RightBracket = function() {
    return this.getToken(LPCParser.RightBracket, 0);
};

IndexOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterIndexOperator(this);
	}
};

IndexOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitIndexOperator(this);
	}
};




LPCParser.IndexOperatorContext = IndexOperatorContext;

LPCParser.prototype.indexOperator = function() {

    var localctx = new IndexOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, LPCParser.RULE_indexOperator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.match(LPCParser.LeftBracket);
        this.state = 669;
        this.range();
        this.state = 670;
        this.match(LPCParser.RightBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_range;
    return this;
}

RangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeContext.prototype.constructor = RangeContext;

RangeContext.prototype.index = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexContext);
    } else {
        return this.getTypedRuleContext(IndexContext,i);
    }
};

RangeContext.prototype.Range = function() {
    return this.getToken(LPCParser.Range, 0);
};

RangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterRange(this);
	}
};

RangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitRange(this);
	}
};




LPCParser.RangeContext = RangeContext;

LPCParser.prototype.range = function() {

    var localctx = new RangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, LPCParser.RULE_range);
    var _la = 0; // Token type
    try {
        this.state = 680;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 672;
            this.index();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 673;
            this.match(LPCParser.Range);
            this.state = 674;
            this.index();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 675;
            this.index();
            this.state = 676;
            this.match(LPCParser.Range);
            this.state = 678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (LPCParser.Function - 10)) | (1 << (LPCParser.Object - 10)) | (1 << (LPCParser.Catch - 10)) | (1 << (LPCParser.Efun - 10)) | (1 << (LPCParser.New - 10)))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (LPCParser.PlusPlus - 47)) | (1 << (LPCParser.MinusMinus - 47)) | (1 << (LPCParser.ScopeOperator - 47)) | (1 << (LPCParser.Add - 47)) | (1 << (LPCParser.Subtract - 47)) | (1 << (LPCParser.Not - 47)) | (1 << (LPCParser.LessThan - 47)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (LPCParser.LeftParen - 82)) | (1 << (LPCParser.FunctionalScope - 82)) | (1 << (LPCParser.Identifier - 82)) | (1 << (LPCParser.IntegerLiteral - 82)) | (1 << (LPCParser.FloatLiteral - 82)) | (1 << (LPCParser.StringLiteral - 82)) | (1 << (LPCParser.CharacterLiteral - 82)))) !== 0)) {
                this.state = 677;
                this.index();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_index;
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IndexContext.prototype.LessThan = function() {
    return this.getToken(LPCParser.LessThan, 0);
};

IndexContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

IndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterIndex(this);
	}
};

IndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitIndex(this);
	}
};




LPCParser.IndexContext = IndexContext;

LPCParser.prototype.index = function() {

    var localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, LPCParser.RULE_index);
    try {
        this.state = 685;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Function:
        case LPCParser.Object:
        case LPCParser.Catch:
        case LPCParser.Efun:
        case LPCParser.New:
        case LPCParser.PlusPlus:
        case LPCParser.MinusMinus:
        case LPCParser.ScopeOperator:
        case LPCParser.Add:
        case LPCParser.Subtract:
        case LPCParser.Not:
        case LPCParser.LeftParen:
        case LPCParser.FunctionalScope:
        case LPCParser.Identifier:
        case LPCParser.IntegerLiteral:
        case LPCParser.FloatLiteral:
        case LPCParser.StringLiteral:
        case LPCParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 682;
            this.expression(0);
            break;
        case LPCParser.LessThan:
            this.enterOuterAlt(localctx, 2);
            this.state = 683;
            this.match(LPCParser.LessThan);
            this.state = 684;
            this.index();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LeftBrace = function() {
    return this.getToken(LPCParser.LeftBrace, 0);
};

BlockContext.prototype.RightBrace = function() {
    return this.getToken(LPCParser.RightBrace, 0);
};

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitBlock(this);
	}
};




LPCParser.BlockContext = BlockContext;

LPCParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, LPCParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 687;
        this.match(LPCParser.LeftBrace);
        this.state = 691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Break) | (1 << LPCParser.Catch) | (1 << LPCParser.Class) | (1 << LPCParser.Continue) | (1 << LPCParser.Efun) | (1 << LPCParser.If) | (1 << LPCParser.Return) | (1 << LPCParser.For) | (1 << LPCParser.Foreach) | (1 << LPCParser.Switch) | (1 << LPCParser.While))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LPCParser.Do - 32)) | (1 << (LPCParser.New - 32)) | (1 << (LPCParser.Array - 32)) | (1 << (LPCParser.PlusPlus - 32)) | (1 << (LPCParser.MinusMinus - 32)) | (1 << (LPCParser.ScopeOperator - 32)) | (1 << (LPCParser.Add - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (LPCParser.Subtract - 64)) | (1 << (LPCParser.Not - 64)) | (1 << (LPCParser.SemiColon - 64)) | (1 << (LPCParser.LeftParen - 64)) | (1 << (LPCParser.Multiply - 64)) | (1 << (LPCParser.FunctionalScope - 64)) | (1 << (LPCParser.Identifier - 64)) | (1 << (LPCParser.BlockComment - 64)) | (1 << (LPCParser.LineComment - 64)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (LPCParser.IntegerLiteral - 98)) | (1 << (LPCParser.FloatLiteral - 98)) | (1 << (LPCParser.StringLiteral - 98)) | (1 << (LPCParser.CharacterLiteral - 98)))) !== 0)) {
            this.state = 688;
            this.statement();
            this.state = 693;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 694;
        this.match(LPCParser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

StatementContext.prototype.conditionalStatement = function() {
    return this.getTypedRuleContext(ConditionalStatementContext,0);
};

StatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementContext.prototype.loopStatement = function() {
    return this.getTypedRuleContext(LoopStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

StatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitStatement(this);
	}
};




LPCParser.StatementContext = StatementContext;

LPCParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, LPCParser.RULE_statement);
    try {
        this.state = 715;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 696;
            this.variableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 697;
            this.expression(0);
            this.state = 698;
            this.match(LPCParser.SemiColon);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 700;
            this.conditionalStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 701;
            this.switchStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 702;
            this.loopStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 703;
            this.breakStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 704;
            this.continueStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 705;
            this.returnStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 706;
            this.comment();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 708; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 707;
            		this.comment();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 710; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 712;
            this.statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 714;
            this.match(LPCParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(LPCParser.Break, 0);
};

BreakStatementContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitBreakStatement(this);
	}
};




LPCParser.BreakStatementContext = BreakStatementContext;

LPCParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, LPCParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        this.match(LPCParser.Break);
        this.state = 718;
        this.match(LPCParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(LPCParser.Continue, 0);
};

ContinueStatementContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitContinueStatement(this);
	}
};




LPCParser.ContinueStatementContext = ContinueStatementContext;

LPCParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, LPCParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.match(LPCParser.Continue);
        this.state = 721;
        this.match(LPCParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementOrBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_statementOrBlock;
    return this;
}

StatementOrBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementOrBlockContext.prototype.constructor = StatementOrBlockContext;

StatementOrBlockContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementOrBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementOrBlockContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

StatementOrBlockContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

StatementOrBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterStatementOrBlock(this);
	}
};

StatementOrBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitStatementOrBlock(this);
	}
};




LPCParser.StatementOrBlockContext = StatementOrBlockContext;

LPCParser.prototype.statementOrBlock = function() {

    var localctx = new StatementOrBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, LPCParser.RULE_statementOrBlock);
    try {
        this.state = 732;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 723;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 724;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 726; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 725;
            		this.comment();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 728; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,70, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 730;
            this.statementOrBlock();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_loopStatement;
    return this;
}

LoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopStatementContext.prototype.constructor = LoopStatementContext;

LoopStatementContext.prototype.doLoopStatement = function() {
    return this.getTypedRuleContext(DoLoopStatementContext,0);
};

LoopStatementContext.prototype.whileLoopStatement = function() {
    return this.getTypedRuleContext(WhileLoopStatementContext,0);
};

LoopStatementContext.prototype.forLoopStatement = function() {
    return this.getTypedRuleContext(ForLoopStatementContext,0);
};

LoopStatementContext.prototype.foreachLoopStatement = function() {
    return this.getTypedRuleContext(ForeachLoopStatementContext,0);
};

LoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterLoopStatement(this);
	}
};

LoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitLoopStatement(this);
	}
};




LPCParser.LoopStatementContext = LoopStatementContext;

LPCParser.prototype.loopStatement = function() {

    var localctx = new LoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, LPCParser.RULE_loopStatement);
    try {
        this.state = 738;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Do:
            this.enterOuterAlt(localctx, 1);
            this.state = 734;
            this.doLoopStatement();
            break;
        case LPCParser.While:
            this.enterOuterAlt(localctx, 2);
            this.state = 735;
            this.whileLoopStatement();
            break;
        case LPCParser.For:
            this.enterOuterAlt(localctx, 3);
            this.state = 736;
            this.forLoopStatement();
            break;
        case LPCParser.Foreach:
            this.enterOuterAlt(localctx, 4);
            this.state = 737;
            this.foreachLoopStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileControlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_whileControlStatement;
    return this;
}

WhileControlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileControlStatementContext.prototype.constructor = WhileControlStatementContext;

WhileControlStatementContext.prototype.While = function() {
    return this.getToken(LPCParser.While, 0);
};

WhileControlStatementContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

WhileControlStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileControlStatementContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

WhileControlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterWhileControlStatement(this);
	}
};

WhileControlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitWhileControlStatement(this);
	}
};




LPCParser.WhileControlStatementContext = WhileControlStatementContext;

LPCParser.prototype.whileControlStatement = function() {

    var localctx = new WhileControlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, LPCParser.RULE_whileControlStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this.match(LPCParser.While);
        this.state = 741;
        this.match(LPCParser.LeftParen);
        this.state = 742;
        this.expression(0);
        this.state = 743;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoLoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_doLoopStatement;
    return this;
}

DoLoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoLoopStatementContext.prototype.constructor = DoLoopStatementContext;

DoLoopStatementContext.prototype.Do = function() {
    return this.getToken(LPCParser.Do, 0);
};

DoLoopStatementContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

DoLoopStatementContext.prototype.whileControlStatement = function() {
    return this.getTypedRuleContext(WhileControlStatementContext,0);
};

DoLoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDoLoopStatement(this);
	}
};

DoLoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDoLoopStatement(this);
	}
};




LPCParser.DoLoopStatementContext = DoLoopStatementContext;

LPCParser.prototype.doLoopStatement = function() {

    var localctx = new DoLoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, LPCParser.RULE_doLoopStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 745;
        this.match(LPCParser.Do);
        this.state = 746;
        this.statementOrBlock();
        this.state = 747;
        this.whileControlStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileLoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_whileLoopStatement;
    return this;
}

WhileLoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileLoopStatementContext.prototype.constructor = WhileLoopStatementContext;

WhileLoopStatementContext.prototype.whileControlStatement = function() {
    return this.getTypedRuleContext(WhileControlStatementContext,0);
};

WhileLoopStatementContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

WhileLoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterWhileLoopStatement(this);
	}
};

WhileLoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitWhileLoopStatement(this);
	}
};




LPCParser.WhileLoopStatementContext = WhileLoopStatementContext;

LPCParser.prototype.whileLoopStatement = function() {

    var localctx = new WhileLoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, LPCParser.RULE_whileLoopStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 749;
        this.whileControlStatement();
        this.state = 750;
        this.statementOrBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForControlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_forControlStatement;
    return this;
}

ForControlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlStatementContext.prototype.constructor = ForControlStatementContext;

ForControlStatementContext.prototype.For = function() {
    return this.getToken(LPCParser.For, 0);
};

ForControlStatementContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

ForControlStatementContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

ForControlStatementContext.prototype.forInitialState = function() {
    return this.getTypedRuleContext(ForInitialStateContext,0);
};

ForControlStatementContext.prototype.forCondition = function() {
    return this.getTypedRuleContext(ForConditionContext,0);
};

ForControlStatementContext.prototype.forIncrementStep = function() {
    return this.getTypedRuleContext(ForIncrementStepContext,0);
};

ForControlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForControlStatement(this);
	}
};

ForControlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForControlStatement(this);
	}
};




LPCParser.ForControlStatementContext = ForControlStatementContext;

LPCParser.prototype.forControlStatement = function() {

    var localctx = new ForControlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, LPCParser.RULE_forControlStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this.match(LPCParser.For);
        this.state = 753;
        this.match(LPCParser.LeftParen);
        this.state = 755;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public) | (1 << LPCParser.Buffer) | (1 << LPCParser.Float) | (1 << LPCParser.Function) | (1 << LPCParser.Int) | (1 << LPCParser.Mapping) | (1 << LPCParser.Mixed) | (1 << LPCParser.Object) | (1 << LPCParser.String) | (1 << LPCParser.Class))) !== 0) || _la===LPCParser.Array || _la===LPCParser.Multiply || _la===LPCParser.Identifier) {
            this.state = 754;
            this.forInitialState();
        }

        this.state = 758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 757;
            this.forCondition();

        }
        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.SemiColon) {
            this.state = 760;
            this.forIncrementStep();
        }

        this.state = 763;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForLoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_forLoopStatement;
    return this;
}

ForLoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForLoopStatementContext.prototype.constructor = ForLoopStatementContext;

ForLoopStatementContext.prototype.forControlStatement = function() {
    return this.getTypedRuleContext(ForControlStatementContext,0);
};

ForLoopStatementContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

ForLoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForLoopStatement(this);
	}
};

ForLoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForLoopStatement(this);
	}
};




LPCParser.ForLoopStatementContext = ForLoopStatementContext;

LPCParser.prototype.forLoopStatement = function() {

    var localctx = new ForLoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, LPCParser.RULE_forLoopStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this.forControlStatement();
        this.state = 766;
        this.statementOrBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForInitialStateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_forInitialState;
    return this;
}

ForInitialStateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitialStateContext.prototype.constructor = ForInitialStateContext;

ForInitialStateContext.prototype.forLoopVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForLoopVariableContext);
    } else {
        return this.getTypedRuleContext(ForLoopVariableContext,i);
    }
};

ForInitialStateContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


ForInitialStateContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForInitialState(this);
	}
};

ForInitialStateContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForInitialState(this);
	}
};




LPCParser.ForInitialStateContext = ForInitialStateContext;

LPCParser.prototype.forInitialState = function() {

    var localctx = new ForInitialStateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, LPCParser.RULE_forInitialState);
    var _la = 0; // Token type
    try {
        this.state = 777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 768;
            this.forLoopVariable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 769;
            this.forLoopVariable();
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LPCParser.Comma) {
                this.state = 770;
                this.match(LPCParser.Comma);
                this.state = 771;
                this.forLoopVariable();
                this.state = 776;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForLoopVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_forLoopVariable;
    return this;
}

ForLoopVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForLoopVariableContext.prototype.constructor = ForLoopVariableContext;

ForLoopVariableContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ForLoopVariableContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ForLoopVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForLoopVariable(this);
	}
};

ForLoopVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForLoopVariable(this);
	}
};




LPCParser.ForLoopVariableContext = ForLoopVariableContext;

LPCParser.prototype.forLoopVariable = function() {

    var localctx = new ForLoopVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, LPCParser.RULE_forLoopVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 779;
            this.dataType();

        }
        this.state = 782;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_forCondition;
    return this;
}

ForConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForConditionContext.prototype.constructor = ForConditionContext;

ForConditionContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

ForConditionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForCondition(this);
	}
};

ForConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForCondition(this);
	}
};




LPCParser.ForConditionContext = ForConditionContext;

LPCParser.prototype.forCondition = function() {

    var localctx = new ForConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, LPCParser.RULE_forCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 784;
        this.match(LPCParser.SemiColon);
        this.state = 785;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForIncrementStepContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_forIncrementStep;
    return this;
}

ForIncrementStepContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForIncrementStepContext.prototype.constructor = ForIncrementStepContext;

ForIncrementStepContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

ForIncrementStepContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForIncrementStepContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForIncrementStep(this);
	}
};

ForIncrementStepContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForIncrementStep(this);
	}
};




LPCParser.ForIncrementStepContext = ForIncrementStepContext;

LPCParser.prototype.forIncrementStep = function() {

    var localctx = new ForIncrementStepContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, LPCParser.RULE_forIncrementStep);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        this.match(LPCParser.SemiColon);
        this.state = 788;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForeachLoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_foreachLoopStatement;
    return this;
}

ForeachLoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeachLoopStatementContext.prototype.constructor = ForeachLoopStatementContext;

ForeachLoopStatementContext.prototype.foreachControlStatement = function() {
    return this.getTypedRuleContext(ForeachControlStatementContext,0);
};

ForeachLoopStatementContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

ForeachLoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForeachLoopStatement(this);
	}
};

ForeachLoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForeachLoopStatement(this);
	}
};




LPCParser.ForeachLoopStatementContext = ForeachLoopStatementContext;

LPCParser.prototype.foreachLoopStatement = function() {

    var localctx = new ForeachLoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, LPCParser.RULE_foreachLoopStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 790;
        this.foreachControlStatement();
        this.state = 791;
        this.statementOrBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForeachControlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_foreachControlStatement;
    return this;
}

ForeachControlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeachControlStatementContext.prototype.constructor = ForeachControlStatementContext;

ForeachControlStatementContext.prototype.Foreach = function() {
    return this.getToken(LPCParser.Foreach, 0);
};

ForeachControlStatementContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

ForeachControlStatementContext.prototype.foreachVariableList = function() {
    return this.getTypedRuleContext(ForeachVariableListContext,0);
};

ForeachControlStatementContext.prototype.In = function() {
    return this.getToken(LPCParser.In, 0);
};

ForeachControlStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForeachControlStatementContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

ForeachControlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForeachControlStatement(this);
	}
};

ForeachControlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForeachControlStatement(this);
	}
};




LPCParser.ForeachControlStatementContext = ForeachControlStatementContext;

LPCParser.prototype.foreachControlStatement = function() {

    var localctx = new ForeachControlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, LPCParser.RULE_foreachControlStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(LPCParser.Foreach);
        this.state = 794;
        this.match(LPCParser.LeftParen);
        this.state = 795;
        this.foreachVariableList();
        this.state = 796;
        this.match(LPCParser.In);
        this.state = 797;
        this.expression(0);
        this.state = 798;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForeachVariableListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_foreachVariableList;
    return this;
}

ForeachVariableListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeachVariableListContext.prototype.constructor = ForeachVariableListContext;

ForeachVariableListContext.prototype.forLoopVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForLoopVariableContext);
    } else {
        return this.getTypedRuleContext(ForLoopVariableContext,i);
    }
};

ForeachVariableListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


ForeachVariableListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterForeachVariableList(this);
	}
};

ForeachVariableListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitForeachVariableList(this);
	}
};




LPCParser.ForeachVariableListContext = ForeachVariableListContext;

LPCParser.prototype.foreachVariableList = function() {

    var localctx = new ForeachVariableListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, LPCParser.RULE_foreachVariableList);
    var _la = 0; // Token type
    try {
        this.state = 808;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 800;
            this.forLoopVariable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 801;
            this.forLoopVariable();
            this.state = 804; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 802;
                this.match(LPCParser.Comma);
                this.state = 803;
                this.forLoopVariable();
                this.state = 806; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LPCParser.Comma);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(LPCParser.Return, 0);
};

ReturnStatementContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

ReturnStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitReturnStatement(this);
	}
};




LPCParser.ReturnStatementContext = ReturnStatementContext;

LPCParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, LPCParser.RULE_returnStatement);
    try {
        this.state = 816;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 810;
            this.match(LPCParser.Return);
            this.state = 811;
            this.match(LPCParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 812;
            this.match(LPCParser.Return);
            this.state = 813;
            this.expressionList();
            this.state = 814;
            this.match(LPCParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.functionName = function() {
    return this.getTypedRuleContext(FunctionNameContext,0);
};

FunctionCallContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionCall(this);
	}
};




LPCParser.FunctionCallContext = FunctionCallContext;

LPCParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, LPCParser.RULE_functionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.functionName();
        this.state = 819;
        this.argumentList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScopedFunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_scopedFunctionCall;
    return this;
}

ScopedFunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScopedFunctionCallContext.prototype.constructor = ScopedFunctionCallContext;

ScopedFunctionCallContext.prototype.ScopeOperator = function() {
    return this.getToken(LPCParser.ScopeOperator, 0);
};

ScopedFunctionCallContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

ScopedFunctionCallContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ScopedFunctionCallContext.prototype.Efun = function() {
    return this.getToken(LPCParser.Efun, 0);
};

ScopedFunctionCallContext.prototype.Object = function() {
    return this.getToken(LPCParser.Object, 0);
};

ScopedFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterScopedFunctionCall(this);
	}
};

ScopedFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitScopedFunctionCall(this);
	}
};




LPCParser.ScopedFunctionCallContext = ScopedFunctionCallContext;

LPCParser.prototype.scopedFunctionCall = function() {

    var localctx = new ScopedFunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, LPCParser.RULE_scopedFunctionCall);
    try {
        this.state = 833;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.ScopeOperator:
            this.enterOuterAlt(localctx, 1);
            this.state = 821;
            this.match(LPCParser.ScopeOperator);
            this.state = 822;
            this.functionCall();
            break;
        case LPCParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 823;
            this.identifier();
            this.state = 824;
            this.match(LPCParser.ScopeOperator);
            this.state = 825;
            this.functionCall();
            break;
        case LPCParser.Efun:
            this.enterOuterAlt(localctx, 3);
            this.state = 827;
            this.match(LPCParser.Efun);
            this.state = 828;
            this.match(LPCParser.ScopeOperator);
            this.state = 829;
            this.functionCall();
            break;
        case LPCParser.Object:
            this.enterOuterAlt(localctx, 4);
            this.state = 830;
            this.match(LPCParser.Object);
            this.state = 831;
            this.match(LPCParser.ScopeOperator);
            this.state = 832;
            this.functionCall();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

ArgumentListContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

ArgumentListContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitArgumentList(this);
	}
};




LPCParser.ArgumentListContext = ArgumentListContext;

LPCParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, LPCParser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        this.match(LPCParser.LeftParen);
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (LPCParser.Function - 10)) | (1 << (LPCParser.Object - 10)) | (1 << (LPCParser.Catch - 10)) | (1 << (LPCParser.Efun - 10)) | (1 << (LPCParser.New - 10)))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (LPCParser.PlusPlus - 47)) | (1 << (LPCParser.MinusMinus - 47)) | (1 << (LPCParser.ScopeOperator - 47)) | (1 << (LPCParser.Add - 47)) | (1 << (LPCParser.Subtract - 47)) | (1 << (LPCParser.Not - 47)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (LPCParser.LeftParen - 82)) | (1 << (LPCParser.FunctionalScope - 82)) | (1 << (LPCParser.Identifier - 82)) | (1 << (LPCParser.IntegerLiteral - 82)) | (1 << (LPCParser.FloatLiteral - 82)) | (1 << (LPCParser.StringLiteral - 82)) | (1 << (LPCParser.CharacterLiteral - 82)))) !== 0)) {
            this.state = 836;
            this.expressionList();
        }

        this.state = 839;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LPCParser.Comma);
    } else {
        return this.getToken(LPCParser.Comma, i);
    }
};


ExpressionListContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitExpressionList(this);
	}
};




LPCParser.ExpressionListContext = ExpressionListContext;

LPCParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, LPCParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        this.expression(0);
        this.state = 852;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 842;
                this.match(LPCParser.Comma);
                this.state = 846;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LPCParser.BlockComment || _la===LPCParser.LineComment) {
                    this.state = 843;
                    this.comment();
                    this.state = 848;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 849;
                this.expression(0); 
            }
            this.state = 854;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
        }

        this.state = 856;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Comma) {
            this.state = 855;
            this.match(LPCParser.Comma);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionName;
    return this;
}

FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameContext.prototype.constructor = FunctionNameContext;

FunctionNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionNameContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

FunctionNameContext.prototype.Multiply = function() {
    return this.getToken(LPCParser.Multiply, 0);
};

FunctionNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionNameContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

FunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionName(this);
	}
};

FunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionName(this);
	}
};




LPCParser.FunctionNameContext = FunctionNameContext;

LPCParser.prototype.functionName = function() {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, LPCParser.RULE_functionName);
    try {
        this.state = 864;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 858;
            this.identifier();
            break;
        case LPCParser.LeftParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 859;
            this.match(LPCParser.LeftParen);
            this.state = 860;
            this.match(LPCParser.Multiply);
            this.state = 861;
            this.expression(0);
            this.state = 862;
            this.match(LPCParser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InheritanceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_inheritanceDeclaration;
    return this;
}

InheritanceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceDeclarationContext.prototype.constructor = InheritanceDeclarationContext;

InheritanceDeclarationContext.prototype.Inherit = function() {
    return this.getToken(LPCParser.Inherit, 0);
};

InheritanceDeclarationContext.prototype.stringExpression = function() {
    return this.getTypedRuleContext(StringExpressionContext,0);
};

InheritanceDeclarationContext.prototype.SemiColon = function() {
    return this.getToken(LPCParser.SemiColon, 0);
};

InheritanceDeclarationContext.prototype.accessLevelModifier = function() {
    return this.getTypedRuleContext(AccessLevelModifierContext,0);
};

InheritanceDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

InheritanceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterInheritanceDeclaration(this);
	}
};

InheritanceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitInheritanceDeclaration(this);
	}
};




LPCParser.InheritanceDeclarationContext = InheritanceDeclarationContext;

LPCParser.prototype.inheritanceDeclaration = function() {

    var localctx = new InheritanceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, LPCParser.RULE_inheritanceDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 880;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0)) {
                this.state = 866;
                this.accessLevelModifier();
            }

            this.state = 869;
            this.match(LPCParser.Inherit);
            this.state = 870;
            this.stringExpression();
            this.state = 871;
            this.match(LPCParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 874;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LPCParser.Private) | (1 << LPCParser.Protected) | (1 << LPCParser.Public))) !== 0)) {
                this.state = 873;
                this.accessLevelModifier();
            }

            this.state = 876;
            this.match(LPCParser.Inherit);
            this.state = 877;
            this.identifier();
            this.state = 878;
            this.match(LPCParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_stringExpression;
    return this;
}

StringExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringExpressionContext.prototype.constructor = StringExpressionContext;

StringExpressionContext.prototype.StringLiteral = function() {
    return this.getToken(LPCParser.StringLiteral, 0);
};

StringExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StringExpressionContext.prototype.Add = function() {
    return this.getToken(LPCParser.Add, 0);
};

StringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterStringExpression(this);
	}
};

StringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitStringExpression(this);
	}
};




LPCParser.StringExpressionContext = StringExpressionContext;

LPCParser.prototype.stringExpression = function() {

    var localctx = new StringExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, LPCParser.RULE_stringExpression);
    var _la = 0; // Token type
    try {
        this.state = 894;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 882;
            this.match(LPCParser.StringLiteral);
            this.state = 884;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 883;
                this.match(LPCParser.Add);

            }
            this.state = 886;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 887;
            this.expression(0);
            this.state = 889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LPCParser.Add) {
                this.state = 888;
                this.match(LPCParser.Add);
            }

            this.state = 891;
            this.match(LPCParser.StringLiteral);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 893;
            this.match(LPCParser.StringLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;

DataTypeContext.prototype.Float = function() {
    return this.getToken(LPCParser.Float, 0);
};

DataTypeContext.prototype.Function = function() {
    return this.getToken(LPCParser.Function, 0);
};

DataTypeContext.prototype.Int = function() {
    return this.getToken(LPCParser.Int, 0);
};

DataTypeContext.prototype.Mapping = function() {
    return this.getToken(LPCParser.Mapping, 0);
};

DataTypeContext.prototype.Mixed = function() {
    return this.getToken(LPCParser.Mixed, 0);
};

DataTypeContext.prototype.Object = function() {
    return this.getToken(LPCParser.Object, 0);
};

DataTypeContext.prototype.String = function() {
    return this.getToken(LPCParser.String, 0);
};

DataTypeContext.prototype.Buffer = function() {
    return this.getToken(LPCParser.Buffer, 0);
};

DataTypeContext.prototype.classIdentifier = function() {
    return this.getTypedRuleContext(ClassIdentifierContext,0);
};

DataTypeContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

DataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDataType(this);
	}
};

DataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDataType(this);
	}
};




LPCParser.DataTypeContext = DataTypeContext;

LPCParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, LPCParser.RULE_dataType);
    try {
        this.state = 906;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Float:
            this.enterOuterAlt(localctx, 1);
            this.state = 896;
            this.match(LPCParser.Float);
            break;
        case LPCParser.Function:
            this.enterOuterAlt(localctx, 2);
            this.state = 897;
            this.match(LPCParser.Function);
            break;
        case LPCParser.Int:
            this.enterOuterAlt(localctx, 3);
            this.state = 898;
            this.match(LPCParser.Int);
            break;
        case LPCParser.Mapping:
            this.enterOuterAlt(localctx, 4);
            this.state = 899;
            this.match(LPCParser.Mapping);
            break;
        case LPCParser.Mixed:
            this.enterOuterAlt(localctx, 5);
            this.state = 900;
            this.match(LPCParser.Mixed);
            break;
        case LPCParser.Object:
            this.enterOuterAlt(localctx, 6);
            this.state = 901;
            this.match(LPCParser.Object);
            break;
        case LPCParser.String:
            this.enterOuterAlt(localctx, 7);
            this.state = 902;
            this.match(LPCParser.String);
            break;
        case LPCParser.Buffer:
            this.enterOuterAlt(localctx, 8);
            this.state = 903;
            this.match(LPCParser.Buffer);
            break;
        case LPCParser.Private:
        case LPCParser.Protected:
        case LPCParser.Public:
        case LPCParser.Class:
            this.enterOuterAlt(localctx, 9);
            this.state = 904;
            this.classIdentifier();
            break;
        case LPCParser.Array:
        case LPCParser.Multiply:
            this.enterOuterAlt(localctx, 10);
            this.state = 905;
            this.array();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionReturnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_functionReturnType;
    return this;
}

FunctionReturnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionReturnTypeContext.prototype.constructor = FunctionReturnTypeContext;

FunctionReturnTypeContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

FunctionReturnTypeContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

FunctionReturnTypeContext.prototype.Void = function() {
    return this.getToken(LPCParser.Void, 0);
};

FunctionReturnTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterFunctionReturnType(this);
	}
};

FunctionReturnTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitFunctionReturnType(this);
	}
};




LPCParser.FunctionReturnTypeContext = FunctionReturnTypeContext;

LPCParser.prototype.functionReturnType = function() {

    var localctx = new FunctionReturnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, LPCParser.RULE_functionReturnType);
    var _la = 0; // Token type
    try {
        this.state = 913;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Private:
        case LPCParser.Protected:
        case LPCParser.Public:
        case LPCParser.Buffer:
        case LPCParser.Float:
        case LPCParser.Function:
        case LPCParser.Int:
        case LPCParser.Mapping:
        case LPCParser.Mixed:
        case LPCParser.Object:
        case LPCParser.String:
        case LPCParser.Class:
        case LPCParser.Array:
        case LPCParser.Multiply:
            this.enterOuterAlt(localctx, 1);
            this.state = 908;
            this.dataType();
            this.state = 910;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LPCParser.Array || _la===LPCParser.Multiply) {
                this.state = 909;
                this.array();
            }

            break;
        case LPCParser.Void:
            this.enterOuterAlt(localctx, 2);
            this.state = 912;
            this.match(LPCParser.Void);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(LPCParser.Identifier, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitIdentifier(this);
	}
};




LPCParser.IdentifierContext = IdentifierContext;

LPCParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, LPCParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 915;
        this.match(LPCParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_conditionalStatement;
    return this;
}

ConditionalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalStatementContext.prototype.constructor = ConditionalStatementContext;

ConditionalStatementContext.prototype.If = function() {
    return this.getToken(LPCParser.If, 0);
};

ConditionalStatementContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConditionalStatementContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

ConditionalStatementContext.prototype.elseStatement = function() {
    return this.getTypedRuleContext(ElseStatementContext,0);
};

ConditionalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterConditionalStatement(this);
	}
};

ConditionalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitConditionalStatement(this);
	}
};




LPCParser.ConditionalStatementContext = ConditionalStatementContext;

LPCParser.prototype.conditionalStatement = function() {

    var localctx = new ConditionalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, LPCParser.RULE_conditionalStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        this.match(LPCParser.If);
        this.state = 918;
        this.conditionalExpression();
        this.state = 919;
        this.statementOrBlock();
        this.state = 921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        if(la_===1) {
            this.state = 920;
            this.elseStatement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

ConditionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalExpressionContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitConditionalExpression(this);
	}
};




LPCParser.ConditionalExpressionContext = ConditionalExpressionContext;

LPCParser.prototype.conditionalExpression = function() {

    var localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, LPCParser.RULE_conditionalExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.match(LPCParser.LeftParen);
        this.state = 924;
        this.expression(0);
        this.state = 925;
        this.match(LPCParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_elseStatement;
    return this;
}

ElseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseStatementContext.prototype.constructor = ElseStatementContext;

ElseStatementContext.prototype.Else = function() {
    return this.getToken(LPCParser.Else, 0);
};

ElseStatementContext.prototype.statementOrBlock = function() {
    return this.getTypedRuleContext(StatementOrBlockContext,0);
};

ElseStatementContext.prototype.comment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentContext);
    } else {
        return this.getTypedRuleContext(CommentContext,i);
    }
};

ElseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterElseStatement(this);
	}
};

ElseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitElseStatement(this);
	}
};




LPCParser.ElseStatementContext = ElseStatementContext;

LPCParser.prototype.elseStatement = function() {

    var localctx = new ElseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, LPCParser.RULE_elseStatement);
    var _la = 0; // Token type
    try {
        this.state = 937;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LPCParser.Else:
            this.enterOuterAlt(localctx, 1);
            this.state = 927;
            this.match(LPCParser.Else);
            this.state = 928;
            this.statementOrBlock();
            break;
        case LPCParser.BlockComment:
        case LPCParser.LineComment:
            this.enterOuterAlt(localctx, 2);
            this.state = 930; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 929;
                this.comment();
                this.state = 932; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LPCParser.BlockComment || _la===LPCParser.LineComment);
            this.state = 934;
            this.match(LPCParser.Else);
            this.state = 935;
            this.statementOrBlock();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(LPCParser.Switch, 0);
};

SwitchStatementContext.prototype.LeftParen = function() {
    return this.getToken(LPCParser.LeftParen, 0);
};

SwitchStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatementContext.prototype.RightParen = function() {
    return this.getToken(LPCParser.RightParen, 0);
};

SwitchStatementContext.prototype.LeftBrace = function() {
    return this.getToken(LPCParser.LeftBrace, 0);
};

SwitchStatementContext.prototype.RightBrace = function() {
    return this.getToken(LPCParser.RightBrace, 0);
};

SwitchStatementContext.prototype.caseStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseStatementContext);
    } else {
        return this.getTypedRuleContext(CaseStatementContext,i);
    }
};

SwitchStatementContext.prototype.defaultSwitchStatement = function() {
    return this.getTypedRuleContext(DefaultSwitchStatementContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitSwitchStatement(this);
	}
};




LPCParser.SwitchStatementContext = SwitchStatementContext;

LPCParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, LPCParser.RULE_switchStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.match(LPCParser.Switch);
        this.state = 940;
        this.match(LPCParser.LeftParen);
        this.state = 941;
        this.expression(0);
        this.state = 942;
        this.match(LPCParser.RightParen);
        this.state = 943;
        this.match(LPCParser.LeftBrace);
        this.state = 947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LPCParser.Case) {
            this.state = 944;
            this.caseStatement();
            this.state = 949;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Default) {
            this.state = 950;
            this.defaultSwitchStatement();
        }

        this.state = 953;
        this.match(LPCParser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_caseLabel;
    return this;
}

CaseLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseLabelContext.prototype.constructor = CaseLabelContext;

CaseLabelContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

CaseLabelContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CaseLabelContext.prototype.stringExpression = function() {
    return this.getTypedRuleContext(StringExpressionContext,0);
};

CaseLabelContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

CaseLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterCaseLabel(this);
	}
};

CaseLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitCaseLabel(this);
	}
};




LPCParser.CaseLabelContext = CaseLabelContext;

LPCParser.prototype.caseLabel = function() {

    var localctx = new CaseLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, LPCParser.RULE_caseLabel);
    try {
        this.state = 959;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 955;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 956;
            this.identifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 957;
            this.stringExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 958;
            this.range();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_caseStatement;
    return this;
}

CaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseStatementContext.prototype.constructor = CaseStatementContext;

CaseStatementContext.prototype.Case = function() {
    return this.getToken(LPCParser.Case, 0);
};

CaseStatementContext.prototype.caseLabel = function() {
    return this.getTypedRuleContext(CaseLabelContext,0);
};

CaseStatementContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

CaseStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

CaseStatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

CaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterCaseStatement(this);
	}
};

CaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitCaseStatement(this);
	}
};




LPCParser.CaseStatementContext = CaseStatementContext;

LPCParser.prototype.caseStatement = function() {

    var localctx = new CaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, LPCParser.RULE_caseStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this.match(LPCParser.Case);
        this.state = 962;
        this.caseLabel();
        this.state = 963;
        this.match(LPCParser.Colon);
        this.state = 967;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 964;
                this.statement(); 
            }
            this.state = 969;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
        }

        this.state = 971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Break) {
            this.state = 970;
            this.breakStatement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultSwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LPCParser.RULE_defaultSwitchStatement;
    return this;
}

DefaultSwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultSwitchStatementContext.prototype.constructor = DefaultSwitchStatementContext;

DefaultSwitchStatementContext.prototype.Default = function() {
    return this.getToken(LPCParser.Default, 0);
};

DefaultSwitchStatementContext.prototype.Colon = function() {
    return this.getToken(LPCParser.Colon, 0);
};

DefaultSwitchStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

DefaultSwitchStatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

DefaultSwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.enterDefaultSwitchStatement(this);
	}
};

DefaultSwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof LPCListener ) {
        listener.exitDefaultSwitchStatement(this);
	}
};




LPCParser.DefaultSwitchStatementContext = DefaultSwitchStatementContext;

LPCParser.prototype.defaultSwitchStatement = function() {

    var localctx = new DefaultSwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, LPCParser.RULE_defaultSwitchStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        this.match(LPCParser.Default);
        this.state = 974;
        this.match(LPCParser.Colon);
        this.state = 978;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 975;
                this.statement(); 
            }
            this.state = 980;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
        }

        this.state = 982;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LPCParser.Break) {
            this.state = 981;
            this.breakStatement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


LPCParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 42:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

LPCParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 6);
		case 1:
			return this.precpred(this._ctx, 13);
		case 2:
			return this.precpred(this._ctx, 12);
		case 3:
			return this.precpred(this._ctx, 11);
		case 4:
			return this.precpred(this._ctx, 5);
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.LPCParser = LPCParser;
